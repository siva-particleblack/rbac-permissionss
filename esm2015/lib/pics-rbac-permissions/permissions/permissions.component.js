import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { PrimeIcons } from 'primeng/api';
import { RBACINFO } from '../@core/urls/rbac-url.config';
import { AppIcons } from '../@core/constants/app-icons';
import * as i0 from "@angular/core";
import * as i1 from "../@core/service/rbac.service";
import * as i2 from "@angular/forms";
import * as i3 from "../@core/service/alert.service";
import * as i4 from "primeng/api";
import * as i5 from "../@core/service/share-data.service";
import * as i6 from "../@core/service/data-store.service";
import * as i7 from "../@shared/alert/alert.component";
import * as i8 from "primeng/tree";
import * as i9 from "primeng/contextmenu";
import * as i10 from "primeng/card";
import * as i11 from "primeng/dropdown";
import * as i12 from "../@core/directives/permission.directive";
import * as i13 from "primeng/inputtext";
import * as i14 from "@angular/common";
export class PermissionsComponent {
    constructor(injector, permissionService, formBuilder, alertService, confirmationService, 
    // private httpService: HttpService,
    _shareData, _storeservice) {
        this.permissionService = permissionService;
        this.formBuilder = formBuilder;
        this.alertService = alertService;
        this.confirmationService = confirmationService;
        this._shareData = _shareData;
        this._storeservice = _storeservice;
        this.menuItems = [];
        this.filteredPermissionList = [];
        this.selectedItem = {};
        this.RBACORG = new RBACINFO();
        this.position = 'top';
        this.duplicatepages = [];
        this.nodeType = 'page';
        this.saveMode = 'INSERT';
        this.sanitizer = injector.get(DomSanitizer);
        this.initializePageForm();
        this.initializePermissionForm();
        this.showParent = true;
    }
    ngOnInit() {
        this.orgSubs = this._storeservice.currentStore.subscribe((res) => {
            if (res['RBACORG'] && res['RBACORG'] !== '') {
                this.RBACORG = res['RBACORG'];
                console.log(this.RBACORG, 'RBACORG Permisson');
                this.environment = this.RBACORG['environment'];
                this.orgId = parseInt(this.RBACORG['orgID']);
                this.httpService = res['HTTPSERVICE'];
                if (this.orgId) {
                    this.setPagesList();
                    this.setPlatformPageList();
                    this.setMenuType();
                    this.setPageType();
                }
                if (this.environment) {
                    this.loadInitial();
                }
            }
        });
    }
    ngOnDestroy() {
        this.orgSubs.unsubscribe();
    }
    loadInitial() {
        this.loadTree();
        // this.loadContextMenu();
        this.loadIcons();
        this.permissionService.getPermissionsTree(this.environment.applicationid).subscribe((items) => {
            this.permissions = items.data;
        });
        this.permissionService.getPermissionTypes(this.environment.applicationid).subscribe((items) => {
            this.permissionTypes = items.data;
        });
    }
    initializePageForm() {
        this.pageForm = this.formBuilder.group({
            id: [0],
            parentid: [null],
            applicationid: [this.environment ? this.environment['applicationid'] : ''],
            name: ['', Validators.required],
            pagetype: [''],
            menuType: [''],
            route: [''],
            order: [0],
            ismenu: [true],
            thumbnail: [''],
            icon: ['', Validators.required]
        });
    }
    initializePermissionForm() {
        this.permissionForm = this.formBuilder.group({
            id: [0],
            parentid: [null],
            pageid: [0],
            permissiontypeid: ['', Validators.required],
            key: ['', Validators.required],
            description: ['', Validators.required],
            order: [0],
            menuType: [''],
            pagetype: ['']
        });
    }
    onNodeContextMenuSelect(_event) {
        console.log();
    }
    nodeSelect(event) {
        var _a, _b, _c, _d;
        this.saveMode = 'UPDATE';
        this.showLinkPage = false;
        this.nodeType = event.node.type;
        if (event.node.type === 'permission') {
            this.permissionForm.reset();
            this.permissionForm.patchValue(event.node);
        }
        else {
            this.pageForm.reset();
            this.pageForm.patchValue(event.node);
            if (event.node.menuType == 'parent') {
                this.showParent = true;
            }
            else {
                this.showParent = false;
            }
            if (!event.node.pagetype || event.node.pagetype == 'dynamic' || event.node.pagetype == '') {
                this.showDynamic = true;
            }
            else {
                this.showDynamic = false;
            }
            this.pageForm.patchValue({
                icon: ((_a = event.node.additionalinfo) === null || _a === void 0 ? void 0 : _a.icon) || '',
            });
            if (event.node.route.includes('/pages/dynamic-search/search')) {
                this.showLinkPage = true;
                this.pageForm.patchValue({
                    route: event.node.route.split('/')[4]
                });
            }
            this.imageInformation = ((_d = (_c = (_b = event.node.additionalinfo) === null || _b === void 0 ? void 0 : _b.thumbnail) === null || _c === void 0 ? void 0 : _c.fileName) === null || _d === void 0 ? void 0 : _d.split('/')[1]) || '';
        }
    }
    nodeExpand(event) {
        const pageId = event.node.type === 'permission' ? event.node.pageid : event.node.data;
        const parentId = event.node.type === 'permission' ? event.node.data : 0;
        if (event.node && event.node.data) {
            this.permissionService.getPermissionTree(pageId, parentId).subscribe((nodes) => {
                event.node.children = nodes.data;
            });
        }
    }
    savePage() {
        const page = this.pageForm.value;
        page.applicationid = this.environment.applicationid;
        page.additionalinfo = {
            icon: page.icon
        };
        if (this.showLinkPage) {
            page.route = `/pages/dynamic-search/search/${page.route}`;
        }
        if (this.pageForm.valid) {
            page.order = page.order ? Number(page.order) : 1;
            if (this.saveMode === 'INSERT') {
                this.permissionService.createPage(page).subscribe((res) => {
                    if (this.showLinkPage) {
                        page.id = res['data'];
                        this.savePermission(page);
                    }
                    this.alertService.success('Page created successfully.');
                    this.loadTree();
                });
            }
            else {
                this.permissionService.updatePage(page).subscribe(() => {
                    this.alertService.success('Page updated successfully.');
                    this.loadTree();
                });
            }
        }
        else {
            this.alertService.error('Please Fill All Required Fields.');
        }
    }
    savePermission(page) {
        if (page) {
            this.permissionForm.patchValue({
                description: page.name,
                key: page.name.toUpperCase().replaceAll(' ', '_'),
                pageid: page.id,
                order: 1,
                permissiontypeid: 1
            });
        }
        const permission = Object.assign(Object.assign({}, this.permissionForm.value), { order: +this.permissionForm.value.order });
        if (this.permissionForm.valid) {
            permission.order = permission.order ? Number(permission.order) : 1;
            delete permission.readonly;
            if (this.saveMode === 'INSERT') {
                this.permissionService.createPermission(permission).subscribe(() => {
                    this.alertService.success('Permission created successfully.');
                    this.loadTree();
                });
            }
            else {
                this.permissionService.updatePermission(permission).subscribe(() => {
                    this.alertService.success('Permission updated successfully.');
                    this.loadTree();
                });
            }
        }
        else {
            // this.alertService.error('Invalid permission data.');
        }
    }
    clearForm() {
        this.showIcon = '';
        if (this.nodeType === 'permission') {
            this.initializePermissionForm();
        }
        else {
            this.initializePageForm();
        }
    }
    resetForm() {
        this.saveMode = '';
        this.imageInformation = '';
        this.pageForm.reset();
        this.clearForm();
    }
    removeThumbnail() {
        this.pageForm.controls['thumbnail'].reset();
        this.imageInformation = '';
    }
    createPermissionForm() {
        this.initializePermissionForm();
        if (this.nodeType === 'page') {
            this.nodeType = 'permission';
            this.permissionForm.patchValue({
                pageid: this.selectedItem.id
            });
        }
        else {
            this.permissionForm.patchValue({
                pageid: this.selectedItem.pageid,
                parentid: this.selectedItem.id
            });
        }
    }
    loadContextMenu(rightclickevent) {
        const permission = {
            SETTINGS_PER_CREATE_PAGE: true,
            SETTINGS_PER_CREATE_PERMISSION: true,
            SETTINGS_PER_DELETE: true
        };
        this.menuItems = [
            {
                label: 'Create sub-menu',
                icon: PrimeIcons.ARROW_UP_LEFT,
                visible: permission.SETTINGS_PER_CREATE_PAGE,
                badge: 'SETTINGS_PER_CREATE_PAGE',
                command: (_event) => {
                    this.saveMode = 'INSERT';
                    this.nodeType = 'page';
                    this.showLinkPage = false;
                    this.createSubMenu(this.selectedItem);
                    // this.clearForm();
                }
            },
            // {
            //   label: 'Link Page',
            //   icon: PrimeIcons.ARROW_UP_LEFT,
            //   visible: permission.SETTINGS_PER_CREATE_PAGE,
            //   command: (_event: any) => {
            //     this.saveMode = 'INSERT';
            //     this.nodeType = 'page';
            //     this.showLinkPage = true;
            //     this.clearForm();
            //   }
            // },
            // {
            //   label: 'Create Permission',
            //   icon: PrimeIcons.ARROW_DOWN_RIGHT,
            //   visible: permission.SETTINGS_PER_CREATE_PERMISSION,
            //   badge: 'SETTINGS_PER_CREATE_PERMISSION',
            //   command: _event => {
            //     this.saveMode = 'INSERT';
            //     this.nodeType = this.selectedItem.type;
            //     this.clearForm();
            //     this.createPermissionForm();
            //   }
            // },
            {
                label: 'Delete',
                icon: PrimeIcons.TRASH,
                visible: permission.SETTINGS_PER_DELETE,
                badge: 'SETTINGS_PER_DELETE',
                command: _event => {
                    this.saveMode = 'DELETE';
                    this.nodeType = this.selectedItem.type;
                    $('#DeletePermission').modal('show');
                }
            }
        ];
    }
    createSubMenu(selectedItem) {
        this.showParent = false;
        this.pageForm.patchValue({
            menuType: 'page',
            parentid: selectedItem.id,
            name: '',
            icon: '',
            pagetype: '',
            route: ''
        });
    }
    loadIcons() {
        this.icons = AppIcons.preloadedIcons;
    }
    checkIcons(event) {
        const isSettingsIconExists = this.icons.some(icon => icon.icon === event.value);
        if (isSettingsIconExists) {
            this.showIcon = event.value;
        }
        else {
            this.showIcon = 'error';
        }
    }
    deletePermission() {
        $('#DeletePermission').modal('hide');
        this.deleteItem();
    }
    setPagesList() {
        this.permissionService.getOrganizationPage(this.orgId).subscribe((res) => {
            const data = res['data'];
            if (data && (data === null || data === void 0 ? void 0 : data.length)) {
                this.pagesList = data === null || data === void 0 ? void 0 : data.filter((a) => { var _a; return (_a = a.activeVersion) === null || _a === void 0 ? void 0 : _a.gridconfig; }).map((x) => {
                    x.activeVersion.pageid = x.activeVersion.pageid.toString();
                    return {
                        id: x.activeVersion.pageid,
                        pagename: x.activeVersion.pagename,
                        value: x.activeVersion.pagename
                    };
                });
            }
        });
    }
    setPlatformPageList() {
        this.permissionService.getPlatformPage().subscribe((res) => {
            const data = res['data'];
            if (data && (data === null || data === void 0 ? void 0 : data.length)) {
                this.platformpagesList = data;
            }
        });
    }
    setMenuType() {
        this.menuType = [
            { name: 'Parent', value: 'parent' },
            { name: 'Page', value: 'page' }
        ];
    }
    setPageType() {
        this.pagetype = [
            { name: 'Platform', value: 'platform' },
            { name: 'Dynamic', value: 'dynamic' }
        ];
    }
    onPageTypeChange(event) {
        if (event.value == 'dynamic') {
            this.showDynamic = true;
        }
        else {
            this.showDynamic = false;
        }
    }
    onMenuTypeChange(event) {
        if (event.value == 'parent') {
            this.showParent = true;
        }
        else {
            this.showParent = false;
        }
    }
    loadTree() {
        this.permissionService.getAllPageTree(this.environment.applicationid).subscribe((items) => {
            this.pages = items;
            this.duplicatepages = items;
            if (this.pages.length) {
                this.selectedItem = this.pages[0];
            }
        });
    }
    deleteItem() {
        this.saveMode = 'UPDATE';
        if (this.selectedItem.type === 'page') {
            this.permissionService.deletePage(this.selectedItem.id).subscribe((_item) => {
                this.alertService.success('Page deleted successfully.');
                this.loadTree();
            });
        }
        else {
            this.permissionService.deletePermission(this.selectedItem.id).subscribe((_item) => {
                this.alertService.success('Control Permission deleted successfully.');
                this.loadTree();
            });
        }
    }
    requiredIfValidator(predicate) {
        return (formControl) => {
            if (!formControl.parent) {
                return null;
            }
            if (predicate()) {
                return Validators.required(formControl);
            }
            return null;
        };
    }
    handleFileInput(fileValue) {
        const target = fileValue.target;
        const file = target.files[0];
        this.uploadedFile = fileValue.target.files[0].name;
        this.imageData = {
            contentType: fileValue.target.files[0].type,
            fileName: `dynamic-menu/${this.uploadedFile}`
        };
        this.imageInformation = this.uploadedFile;
        if (this.validateImage(fileValue.target.files)) {
            this.permissionService.uploadKey(this.imageData).subscribe((res) => {
                this.urlPath = res.data;
                const uploadAttachment = document.getElementById('file');
                const uploadAttachmentDetails = uploadAttachment.files[0];
                this.httpService.putUpload(this.urlPath, uploadAttachmentDetails, uploadAttachmentDetails.type).subscribe((_resp) => {
                    this.alertService.success('Uploaded Successfully!');
                    const reader = new FileReader();
                    reader.onload = () => {
                        const value = this.sanitizer.bypassSecurityTrustUrl(reader.result);
                        this.pageForm.patchValue({ thumbnail: value });
                    };
                    reader.readAsDataURL(file);
                    this.attachType = fileValue.target.files[0].type;
                }, (error) => {
                    if (error.status == 0) {
                        this.alertService.error('AppConstants.errorMessage');
                        this.uploadedFile = '';
                        this.urlPath = '';
                    }
                });
            }, (_error) => {
                this.alertService.error('AppConstants.errorMessage');
            });
        }
    }
    validateImage(file) {
        const fileSize = Number(file[0].size) / 1024;
        const filetype = file[0].type.replace('image/', '');
        if (filetype === 'jpg' ||
            filetype === 'jpeg' ||
            filetype === 'png' ||
            filetype === 'gif' ||
            filetype === 'svg+xml') {
            if (fileSize < 50) {
                return true;
            }
            else {
                this.imageInformation = 'Image size exceeds 50 KB';
                this.alertService.warn('File is bigger than 50 KB');
                return false;
            }
        }
        else {
            this.imageInformation = '';
            this.alertService.warn(`${filetype} format is not supported`);
            return false;
        }
    }
    searchPermissionList(event) {
        const value = event.target.value.toLowerCase();
        this.pages = this.duplicatepages.filter((a) => { var _a; return (_a = a === null || a === void 0 ? void 0 : a.name) === null || _a === void 0 ? void 0 : _a.toLowerCase().startsWith(value); });
    }
}
PermissionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PermissionsComponent, deps: [{ token: i0.Injector }, { token: i1.RbacService }, { token: i2.FormBuilder }, { token: i3.AlertService }, { token: i4.ConfirmationService }, { token: i5.ShareDataService }, { token: i6.DataStoreService }], target: i0.ɵɵFactoryTarget.Component });
PermissionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PermissionsComponent, selector: "permissions", ngImport: i0, template: "<app-alert></app-alert>\r\n<div class=\"adjustpadding\">\r\n  <button class=\"pull-right mb-2 btn btn-primary btncommon\" fieldKey=\"SETTINGS_PER_ADD_PAGE\"\r\n    (click)=\"clearForm()\">\r\n    Add Menu\r\n  </button>\r\n</div>\r\n<div class=\"permission\">\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-4 col-md-6 col-12\">\r\n      <div class=\"clearfix\"></div>\r\n      <div class=\"tab-content py-2\">\r\n        <div class=\"tab-pane fade show active\">\r\n          <div class=\"form-group bgiconsearch\">\r\n            <input\r\n              class=\"form-control\"\r\n              placeholder=\"Search by Menu Name\"\r\n              type=\"text\"\r\n              (keyup)=\"searchPermissionList($event)\" \r\n              pInputText />\r\n          </div>\r\n          <div class=\"clearfix\"></div>\r\n          <div class=\"masteracess\">\r\n            <p-tree [value]=\"pages\" selectionMode=\"single\" [(selection)]=\"selectedItem\"\r\n              (onNodeRightClick) = \"loadContextMenu($event)\"\r\n              (onNodeSelect)=\"nodeSelect($event)\" (onNodeContextMenuSelect)=\"onNodeContextMenuSelect($event)\"\r\n              (onNodeExpand)=\"nodeExpand($event)\" [contextMenu]=\"treeContextMenu\"></p-tree>\r\n            <p-contextMenu #treeContextMenu [model]=\"menuItems\" appendTo=\"body\"></p-contextMenu>\r\n            <!-- <p-confirmPopup styleClass=\"delete-popup\"></p-confirmPopup> -->\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-lg-8 col-md-6 col-12 master-right mt-2\">\r\n      <p-card *ngIf=\"nodeType === 'page'\" id=\"pageForm\" class=\"rbac-card\" [formGroup]=\"pageForm\"\r\n        [style]=\"{ width: '100%', 'margin-bottom': '2em' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Add Menu</span>\r\n        </div>\r\n        <input id=\"cid\" type=\"hidden\" formControlName=\"id\" />\r\n        <input id=\"capplicationid\" type=\"hidden\" formControlName=\"applicationid\" />\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"cname\" class=\"referral-form-labels\">Name\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"cname\" type=\"text\" formControlName=\"name\" fieldKey=\"SETTINGS_PER_NAME\" placeholder=\"Enter Name\"\r\n              aria-describedby=\"cname\" pattern=\"[a-zA-Z0-9]+(\\s[a-zA-Z0-9]+)*\" pInputText />\r\n            <div *ngIf=\"\r\n              pageForm.controls['name'].invalid &&\r\n                pageForm.controls['name'].dirty &&\r\n                !pageForm.controls['name'].hasError('required')\">\r\n              <small *ngIf=\"pageForm.controls['name'].errors && pageForm.controls['name'].invalid\"\r\n                class=\"p-error block\">Invalid input data</small>\r\n            </div>\r\n            <div *ngIf=\"\r\n            pageForm.controls['name'].invalid &&\r\n            pageForm.controls['name'].hasError('required') &&\r\n            (pageForm.controls['name'].dirty || pageForm.controls['name'].touched)\">\r\n              <small *ngIf=\"pageForm.controls['name'].hasError('required')\" class=\"p-error block\">Name is\r\n                required</small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"icon\" class=\"referral-form-labels\">\r\n              Icon\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <div class=\"d-flex\">\r\n              <!-- <input id=\"icon\" type=\"text\" formControlName=\"icon\" placeholder=\"Enter Icon Name\"\r\n                aria-describedby=\"cdescription-icon\" pInputText /> -->\r\n              <p-dropdown [options]=\"icons\" formControlName=\"icon\" fieldKey=\"SETTINGS_PER_ROUTE\" (onChange)=\"checkIcons($event)\"\r\n                placeholder=\"Enter/Select Icon\" optionLabel=\"icon\" optionValue=\"icon\" [showClear]=\"true\" [editable]=\"true\">\r\n              </p-dropdown>\r\n              <span class=\"material-symbols-outlined userempty\">\r\n                {{ showIcon }}\r\n              </span>\r\n            </div>\r\n            <div *ngIf=\" pageForm.controls['icon'].invalid &&\r\n              (pageForm.controls['icon'].dirty || pageForm.controls['icon'].touched)\">\r\n              <small *ngIf=\"pageForm.controls['icon'].invalid\" class=\"p-error block\">Icon is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"croute\" class=\"referral-form-labels\">\r\n              Menu Type\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <p-dropdown [options]=\"menuType\" formControlName=\"menuType\" fieldKey=\"SETTINGS_PER_NAME\" (onChange)=\"onMenuTypeChange($event)\"\r\n              placeholder=\"Select Menu Type\" optionLabel=\"name\" optionValue=\"value\" [showClear]=\"true\">\r\n            </p-dropdown>\r\n            <div *ngIf=\"pageForm.controls['menuType'].invalid &&\r\n                (pageForm.controls['menuType'].dirty || pageForm.controls['menuType'].touched)\">\r\n              <small *ngIf=\"pageForm.controls['menuType'].invalid\" class=\"p-error block\">Menu type is required </small>\r\n            </div>\r\n          </div>\r\n          <!-- <div class=\"col-lg-3 col-md-12 col-12 mb-3\" *ngIf=\"!showLinkPage\">\r\n            <label for=\"croute\" class=\"referral-form-labels\">\r\n              Route\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"croute\" type=\"text\" formControlName=\"route\" fieldKey=\"SETTINGS_PER_ROUTE\"\r\n              placeholder=\"Enter Route\" aria-describedby=\"croute\" pattern=\"[a-zA-Z0-9\\/\\\\-]*\" pInputText />\r\n              <div *ngIf=\"\r\n              pageForm.controls['route'].invalid &&\r\n                pageForm.controls['route'].dirty &&\r\n              !pageForm.controls['route'].hasError('required')\">\r\n              <small *ngIf=\"pageForm.controls['route'].errors && pageForm.controls['route'].invalid\"\r\n                class=\"p-error block\">Invalid input data</small>\r\n            </div>\r\n            <div *ngIf=\"\r\n            pageForm.controls['route'].invalid &&\r\n            pageForm.controls['route'].hasError('required') &&\r\n            (pageForm.controls['route'].dirty || pageForm.controls['route'].touched)\">\r\n              <small *ngIf=\"pageForm.controls['route'].hasError('required')\" class=\"p-error block\">Route is\r\n                required</small>\r\n            </div>\r\n          </div> -->\r\n          <!-- <div class=\"col-lg-3 col-md-12 col-12 mb-3\" *ngIf=\"showLinkPage\">\r\n            <label for=\"croute\" class=\"referral-form-labels\">\r\n              Dynamic Pages\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <p-dropdown [options]=\"pagesList\" formControlName=\"route\" fieldKey=\"SETTINGS_PER_ROUTE\"\r\n              placeholder=\"Select Dynamic Page\" optionLabel=\"value\" optionValue=\"id\" [showClear]=\"true\">\r\n            </p-dropdown>\r\n            <div *ngIf=\"\r\n                pageForm.controls['route'].invalid &&\r\n                (pageForm.controls['route'].dirty || pageForm.controls['route'].touched)\r\n              \">\r\n              <small *ngIf=\"pageForm.controls['route'].invalid\" class=\"p-error block\">Route is required </small>\r\n            </div>\r\n          </div> -->\r\n          <!-- <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"corder\" class=\"referral-form-labels\">Parent Page </label>\r\n            <p-dropdown [options]=\"pages\" placeholder=\"Select Parent Page\" formControlName=\"parentid\" optionLabel=\"name\"\r\n              optionValue=\"id\" [showClear]=\"true\" fieldKey=\"SETTINGS_PER_PARENT_PAGE\">\r\n            </p-dropdown>\r\n          </div> -->\r\n          <!-- <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"corder\" class=\"referral-form-labels d-none d-lg-inline-block\">&#160;</label>\r\n            <div>\r\n              <p-checkbox st inputId=\"binary\" [binary]=\"true\" fieldKey=\"SETTINGS_PER_MENU\" formControlName=\"ismenu\"\r\n                label=\"Menu\"></p-checkbox>\r\n            </div>\r\n          </div> -->\r\n        </div>\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\">\r\n            <label for=\"corder\" class=\"referral-form-labels\">Parent Page </label>\r\n            <p-dropdown [options]=\"pages\" placeholder=\"Select Parent Page\" formControlName=\"parentid\" optionLabel=\"name\"\r\n              optionValue=\"id\" [showClear]=\"true\" fieldKey=\"SETTINGS_PER_PARENT_PAGE\">\r\n            </p-dropdown>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\" *ngIf=\"!showParent\">\r\n            <label for=\"croute\" class=\"referral-form-labels\">\r\n              Page Type\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <p-dropdown [options]=\"pagetype\" formControlName=\"pagetype\" fieldKey=\"SETTINGS_PER_NAME\"\r\n              placeholder=\"Select Page Type\" optionLabel=\"name\" optionValue=\"value\" (onChange)=\"onPageTypeChange($event)\" [showClear]=\"true\">\r\n            </p-dropdown>\r\n            <div *ngIf=\"\r\n                pageForm.controls['pagetype'].invalid &&\r\n                (pageForm.controls['pagetype'].dirty || pageForm.controls['pagetype'].touched)\r\n              \">\r\n              <small *ngIf=\"pageForm.controls['pagetype'].invalid\" class=\"p-error block\">Page type is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\" *ngIf=\"showDynamic && !showParent\">\r\n            <label for=\"croute\" class=\"referral-form-labels\">\r\n              Dynamic Pages\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <p-dropdown [options]=\"pagesList\" formControlName=\"route\" fieldKey=\"SETTINGS_PER_ROUTE\"\r\n              placeholder=\"Select Dynamic Page\" optionLabel=\"value\" optionValue=\"id\" [showClear]=\"true\">\r\n            </p-dropdown>\r\n            <div *ngIf=\"\r\n                pageForm.controls['route'].invalid &&\r\n                (pageForm.controls['route'].dirty || pageForm.controls['route'].touched)\r\n              \">\r\n              <small *ngIf=\"pageForm.controls['route'].invalid\" class=\"p-error block\">Dynamic page is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-lg-3 col-md-12 col-12 mb-3\" *ngIf=\"!showDynamic && !showParent\">\r\n            <label for=\"croute\" class=\"referral-form-labels\">\r\n              Platform Pages\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <p-dropdown [options]=\"platformpagesList\" formControlName=\"route\" fieldKey=\"SETTINGS_PER_ROUTE\"\r\n              placeholder=\"Select Platform Page\" optionLabel=\"pagename\" optionValue=\"pageurl\" [showClear]=\"true\">\r\n            </p-dropdown>\r\n            <div *ngIf=\"\r\n                pageForm.controls['route'].invalid &&\r\n                (pageForm.controls['route'].dirty || pageForm.controls['route'].touched)\r\n              \">\r\n              <small *ngIf=\"pageForm.controls['route'].invalid\" class=\"p-error block\">Platform page is required </small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon\" fieldKey=\"SETTINGS_PER_ADD_PAGE\"\r\n            (click)=\"savePage()\">\r\n            {{ saveMode === 'UPDATE' ? 'Update Menu' : 'Add Menu' }}\r\n          </button>\r\n          <button fieldKey=\"SETTINGS_PER_CANCEL\"\r\n            class=\"pull-right mb-2 mr-2 btn bg-white text-primary border border-primary btncancel\"\r\n            (click)=\"resetForm()\">\r\n            Cancel\r\n          </button>\r\n          <br />\r\n          <br />\r\n        </div>\r\n      </p-card>\r\n\r\n      <!-- <p-card *ngIf=\"nodeType === 'permission'\" id=\"permissionForm\" class=\"rbac-card\" [formGroup]=\"permissionForm\"\r\n        [style]=\"{ width: '100%', 'margin-bottom': '2em' }\">\r\n        <div class=\"strip_head toggleleft\">\r\n          <span class=\"report_head font-weight-bold\">Permission</span>\r\n        </div>\r\n\r\n        <input id=\"lid\" type=\"hidden\" formControlName=\"id\" />\r\n        <input id=\"lpermissionpageid\" type=\"hidden\" formControlName=\"permissiontypeid\" />\r\n        <input id=\"lparentid\" type=\"hidden\" formControlName=\"parentid\" />\r\n        <input id=\"lpageid\" type=\"hidden\" formControlName=\"pageid\" />\r\n\r\n        <div class=\"p-fluid p-formgrid p-grid\">\r\n          <div class=\"p-field p-col\">\r\n            <label for=\"lpermissiontype\" class=\"referral-form-labels\">Permission Type\r\n              <span class=\"requiredfield text-danger\">*</span></label>\r\n            <p-dropdown id=\"lpermissiontype\" [options]=\"permissionTypes\" placeholder=\"Select a Permission Type\"\r\n              formControlName=\"permissiontypeid\" optionLabel=\"name\" optionValue=\"id\">\r\n            </p-dropdown>\r\n            <div *ngIf=\"permissionForm.controls['permissiontypeid'].errors\">\r\n              <small *ngIf=\"permissionForm.controls['permissiontypeid'].invalid\" class=\"p-error block\">Permission Type\r\n                is required\r\n              </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field p-col\">\r\n            <label for=\"lkey\" class=\"referral-form-labels\">Key\r\n              <span class=\"requiredfield text-danger\">*</span>\r\n            </label>\r\n            <input id=\"lkey\" type=\"text\" placeholder=\"Enter Key\" formControlName=\"key\" aria-describedby=\"lkey-help\"\r\n              pInputText />\r\n            <div *ngIf=\"permissionForm.controls['key'].errors\">\r\n              <small *ngIf=\"permissionForm.controls['key'].invalid\" class=\"p-error block\">Key is required </small>\r\n            </div>\r\n          </div>\r\n          <div class=\"p-field p-col\">\r\n            <label for=\"lvalue\" class=\"referral-form-labels\">Description <span\r\n                class=\"requiredfield text-danger\">*</span> </label>\r\n            <input id=\"lvalue\" type=\"text\" placeholder=\"Enter Value\" formControlName=\"description\"\r\n              aria-describedby=\"pname-help\" pInputText />\r\n            <div *ngIf=\"permissionForm.controls['description'].errors\">\r\n              <small *ngIf=\"permissionForm.controls['description'].invalid\" class=\"p-error block\">Description is\r\n                required\r\n              </small>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"mt-2\">\r\n          <button type=\"submit\" class=\"pull-right mb-2 btn btn-primary btncommon\" (click)=\"savePermission()\">\r\n            {{ saveMode === 'UPDATE' ? 'Update Permission' : 'Add Permission' }}\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" (click)=\"clearForm()\">Cancel</button>\r\n          <br />\r\n          <br />\r\n        </div>\r\n      </p-card> -->\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"modal\" id=\"DeletePermission\" tabindex=\"-1\" role=\"dialog\">\r\n  <div class=\"modal-dialog\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Delete Permission</h5>\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"modal-body\">\r\n        Are you sure you want to delete the Permission?\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"mt-2\">\r\n          <button class=\"pull-right mb-2 btn btn-primary btncommon delete\" data-dismiss=\"modal\"\r\n            (click)=\"deletePermission()\">\r\n            Delete\r\n          </button>\r\n          <button class=\"pull-right mb-2 mr-2 btn bg-white text-primary btncancel\" data-dismiss=\"modal\">\r\n            Cancel\r\n          </button>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".head-div{padding-top:9px;padding-left:7px}.bgiconsearch{margin-bottom:5px;padding-bottom:0;font-size:13px}.masteracess{border:solid 1px var(--table-border);border-radius:2px;padding:5px 0;overflow-y:auto;background:var(--bg-light)}.masterempty{max-width:none;border-radius:50%;height:40px;width:40px}.row.masterdata{margin:0;border-bottom:solid 1px var(--table-border);padding:5px 0;cursor:pointer}.overflow_txt{overflow:hidden;text-overflow:ellipsis}span.namemaster{font-size:13px;color:var(--text-dark)}.masterid,span.emailmaster{font-size:13px;color:#9b9b9b}span.deletemaster{position:absolute;top:0px;right:15px;z-index:9;width:20px;float:right;cursor:pointer}span.deletemaster img{width:12px}.activate{position:absolute;margin-top:-46px;margin-left:44rem}.toggleleft{font-size:14px;font-weight:600;display:block;margin-top:-12px;padding-bottom:13px}.report_button{margin-left:12px}:host ::ng-deep .ui-tree.permission-tree{width:100%}.userempty{max-width:none;padding:8px;border-radius:10%;height:36px;width:35px;color:var(--text-dark);margin-left:10px;display:flex;align-items:center}.fileupload .profile{color:#fff}.rbac-card .p-fluid .p-inputtext{padding:8px}.rbac-card .warning{margin-left:10px}.pi-trash{color:red;font-size:12px}@media screen and (max-width: 767px){.masteracess{max-height:400px}}@media screen and (min-width: 990px){.masteracess{height:calc(100vh - 188px)}}@media screen and (max-width: 990px){:host ::ng-deep .selected-list .c-list{width:calc(100% - 35px)!important}.pageLevelAccessTable{width:100%;overflow:auto}.pageLevelAccessTable .table{margin-bottom:60px}}.adjustpadding{padding-top:10px;padding-bottom:40px}\n"], components: [{ type: i7.AlertComponent, selector: "app-alert" }, { type: i8.Tree, selector: "p-tree", inputs: ["value", "selectionMode", "selection", "style", "styleClass", "contextMenu", "layout", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "metaKeySelection", "propagateSelectionUp", "propagateSelectionDown", "loading", "loadingIcon", "emptyMessage", "ariaLabel", "togglerAriaLabel", "ariaLabelledBy", "validateDrop", "filter", "filterBy", "filterMode", "filterPlaceholder", "filteredNodes", "filterLocale", "scrollHeight", "virtualScroll", "virtualNodeHeight", "minBufferPx", "maxBufferPx", "indentation", "trackBy"], outputs: ["selectionChange", "onNodeSelect", "onNodeUnselect", "onNodeExpand", "onNodeCollapse", "onNodeContextMenuSelect", "onNodeDrop", "onFilter"] }, { type: i9.ContextMenu, selector: "p-contextMenu", inputs: ["model", "global", "target", "style", "styleClass", "appendTo", "autoZIndex", "baseZIndex", "triggerEvent"], outputs: ["onShow", "onHide"] }, { type: i10.Card, selector: "p-card", inputs: ["header", "subheader", "style", "styleClass"] }, { type: i11.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "virtualScroll", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "disabled", "options", "filterValue"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear"] }], directives: [{ type: i12.PermissionDirective, selector: "[fieldKey]", inputs: ["fieldKey"] }, { type: i13.InputText, selector: "[pInputText]" }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PermissionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'permissions',
                    templateUrl: './permissions.component.html',
                    styleUrls: ['./permissions.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.RbacService }, { type: i2.FormBuilder }, { type: i3.AlertService }, { type: i4.ConfirmationService }, { type: i5.ShareDataService }, { type: i6.DataStoreService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVybWlzc2lvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGljcy1jb3JlL3JiYWMtcGVybWlzc2lvbnMvc3JjL2xpYi9waWNzLXJiYWMtcGVybWlzc2lvbnMvcGVybWlzc2lvbnMvcGVybWlzc2lvbnMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGljcy1jb3JlL3JiYWMtcGVybWlzc2lvbnMvc3JjL2xpYi9waWNzLXJiYWMtcGVybWlzc2lvbnMvcGVybWlzc2lvbnMvcGVybWlzc2lvbnMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBMkIsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUEyQyxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFpQyxVQUFVLEVBQVksTUFBTSxhQUFhLENBQUM7QUFLbEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBSXpELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7OztBQVF4RCxNQUFNLE9BQU8sb0JBQW9CO0lBb0MvQixZQUNFLFFBQWtCLEVBQ1YsaUJBQThCLEVBQzlCLFdBQXdCLEVBQ3hCLFlBQTBCLEVBQzFCLG1CQUF3QztJQUNoRCxvQ0FBb0M7SUFDNUIsVUFBNEIsRUFDNUIsYUFBK0I7UUFOL0Isc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFhO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFFeEMsZUFBVSxHQUFWLFVBQVUsQ0FBa0I7UUFDNUIs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QUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLFdBQ2pELE9BQUEsTUFBQSxDQUFDLGFBQUQsQ0FBQyx1QkFBRCxDQUFDLENBQUUsSUFBSSwwQ0FBRSxXQUFXLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBLEVBQUEsQ0FDekMsQ0FBQztJQUNKLENBQUM7O2tIQWxnQlUsb0JBQW9CO3NHQUFwQixvQkFBb0IsbURDcEJqQywyK2dCQTJTTTs0RkR2Uk8sb0JBQW9CO2tCQUxoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxhQUFhO29CQUN2QixXQUFXLEVBQUUsOEJBQThCO29CQUMzQyxTQUFTLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztpQkFDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEluamVjdG9yLCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IENvbmZpcm1hdGlvblNlcnZpY2UsIE1lbnVJdGVtLCBQcmltZUljb25zLCBUcmVlTm9kZSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcclxuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vQGNvcmUvc2VydmljZS9hbGVydC5zZXJ2aWNlJztcclxuLy8gaW1wb3J0IHsgSHR0cFNlcnZpY2UgfSBmcm9tICcuLi9AY29yZS9zZXJ2aWNlL2h0dHAuc2VydmljZSc7XHJcbmltcG9ydCB7IFJiYWNTZXJ2aWNlIH0gZnJvbSAnLi4vQGNvcmUvc2VydmljZS9yYmFjLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTaGFyZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi4vQGNvcmUvc2VydmljZS9zaGFyZS1kYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSQkFDSU5GTyB9IGZyb20gJy4uL0Bjb3JlL3VybHMvcmJhYy11cmwuY29uZmlnJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IERhdGFTdG9yZVNlcnZpY2UgfSBmcm9tICcuLi9AY29yZS9zZXJ2aWNlL2RhdGEtc3RvcmUuc2VydmljZSc7XHJcbmltcG9ydCB7QXBwQ29uc3RhbnRzfSBmcm9tICcuLi9AY29yZS9jb25zdGFudHMvYXBwLWNvbnN0YW50cydcclxuaW1wb3J0IHsgQXBwSWNvbnMgfSBmcm9tICcuLi9AY29yZS9jb25zdGFudHMvYXBwLWljb25zJztcclxuZGVjbGFyZSBjb25zdCAkOiBhbnk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ3Blcm1pc3Npb25zJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcGVybWlzc2lvbnMuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3Blcm1pc3Npb25zLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBwYWdlcyE6IFRyZWVOb2RlW107XHJcbiAgbWVudUl0ZW1zOiBNZW51SXRlbVtdID0gW107XHJcbiAgZmlsdGVyZWRQZXJtaXNzaW9uTGlzdDogYW55W10gPSBbXTtcclxuICBwYWdlRm9ybSE6IEZvcm1Hcm91cDtcclxuICBwZXJtaXNzaW9uRm9ybSE6IEZvcm1Hcm91cDtcclxuICBwZXJtaXNzaW9ucyE6IGFueVtdO1xyXG4gIHBlcm1pc3Npb25UeXBlcyE6IGFueVtdO1xyXG4gIG5vZGVUeXBlOiBzdHJpbmc7XHJcbiAgc2F2ZU1vZGU6IHN0cmluZztcclxuICBzZWxlY3RlZEl0ZW06IGFueSA9IHt9O1xyXG4gIGltYWdlSW5mb3JtYXRpb246IGFueTtcclxuICB1cmxQYXRoOiBhbnk7XHJcbiAgdXBsb2FkZWRGaWxlOiBhbnk7XHJcbiAgYXR0YWNoVHlwZTogYW55O1xyXG4gIGltYWdlRGF0YSE6IHsgY29udGVudFR5cGU6IGFueTsgZmlsZU5hbWU6IGFueTsgfTtcclxuICBhdHRhY2htZW50U2VydmljZTogYW55O1xyXG4gIHNhbml0aXplcjogRG9tU2FuaXRpemVyO1xyXG4gIHBhZ2VBY2Nlc3NTZXJ2aWNlOiBhbnk7XHJcbiAgcGFnZXNMaXN0OiBhbnk7XHJcbiAgcGxhdGZvcm1wYWdlc0xpc3Q6IGFueTtcclxuICBtZW51VHlwZTogYW55O1xyXG4gIHBhZ2V0eXBlOiBhbnk7XHJcbiAgaWNvbnM6IGFueTtcclxuICBSQkFDT1JHOiBSQkFDSU5GTyA9IG5ldyBSQkFDSU5GTygpO1xyXG4gIG9yZ1N1YnMhOiBTdWJzY3JpcHRpb247XHJcbiAgb3JnSWQ6IGFueTtcclxuICBwb3NpdGlvbjogc3RyaW5nID0gJ3RvcCc7XHJcbiAgc2hvd0xpbmtQYWdlITogYm9vbGVhbjtcclxuICBzaG93RHluYW1pYyE6IGJvb2xlYW47XHJcbiAgc2hvd1BhcmVudCE6IGJvb2xlYW47XHJcbiAgZW52aXJvbm1lbnQ6IGFueTtcclxuICBkdXBsaWNhdGVwYWdlczogYW55W10gPVtdO1xyXG4gIGh0dHBTZXJ2aWNlOmFueTtcclxuICBzaG93SWNvbjogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIHByaXZhdGUgcGVybWlzc2lvblNlcnZpY2U6IFJiYWNTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIsXHJcbiAgICBwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBjb25maXJtYXRpb25TZXJ2aWNlOiBDb25maXJtYXRpb25TZXJ2aWNlLFxyXG4gICAgLy8gcHJpdmF0ZSBodHRwU2VydmljZTogSHR0cFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIF9zaGFyZURhdGE6IFNoYXJlRGF0YVNlcnZpY2UsXHJcbiAgICBwcml2YXRlIF9zdG9yZXNlcnZpY2U6IERhdGFTdG9yZVNlcnZpY2VcclxuICApIHtcclxuICAgIHRoaXMubm9kZVR5cGUgPSAncGFnZSc7XHJcbiAgICB0aGlzLnNhdmVNb2RlID0gJ0lOU0VSVCc7XHJcbiAgICB0aGlzLnNhbml0aXplciA9IGluamVjdG9yLmdldDxEb21TYW5pdGl6ZXI+KERvbVNhbml0aXplcik7XHJcbiAgICB0aGlzLmluaXRpYWxpemVQYWdlRm9ybSgpO1xyXG4gICAgdGhpcy5pbml0aWFsaXplUGVybWlzc2lvbkZvcm0oKTtcclxuICAgIHRoaXMuc2hvd1BhcmVudCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMub3JnU3VicyA9ICB0aGlzLl9zdG9yZXNlcnZpY2UuY3VycmVudFN0b3JlLnN1YnNjcmliZSgocmVzOiBhbnkpID0+IHtcclxuICAgICAgaWYgKHJlc1snUkJBQ09SRyddICYmIHJlc1snUkJBQ09SRyddICE9PSAnJykge1xyXG4gICAgICAgIHRoaXMuUkJBQ09SRyA9IHJlc1snUkJBQ09SRyddO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuUkJBQ09SRywgJ1JCQUNPUkcgUGVybWlzc29uJyk7XHJcbiAgICAgICAgdGhpcy5lbnZpcm9ubWVudCA9IHRoaXMuUkJBQ09SR1snZW52aXJvbm1lbnQnXTtcclxuICAgICAgICB0aGlzLm9yZ0lkID0gcGFyc2VJbnQodGhpcy5SQkFDT1JHWydvcmdJRCddKTtcclxuICAgICAgICB0aGlzLmh0dHBTZXJ2aWNlID0gcmVzWydIVFRQU0VSVklDRSddXHJcbiAgICAgICAgaWYgKHRoaXMub3JnSWQpIHtcclxuICAgICAgICAgIHRoaXMuc2V0UGFnZXNMaXN0KCk7XHJcbiAgICAgICAgICB0aGlzLnNldFBsYXRmb3JtUGFnZUxpc3QoKTtcclxuICAgICAgICAgIHRoaXMuc2V0TWVudVR5cGUoKTtcclxuICAgICAgICAgIHRoaXMuc2V0UGFnZVR5cGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5lbnZpcm9ubWVudCl7XHJcbiAgICAgICAgICB0aGlzLmxvYWRJbml0aWFsKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLm9yZ1N1YnMudW5zdWJzY3JpYmUoKTtcclxuICB9XHJcbiAgbG9hZEluaXRpYWwoKXtcclxuICAgIHRoaXMubG9hZFRyZWUoKTtcclxuICAgIC8vIHRoaXMubG9hZENvbnRleHRNZW51KCk7XHJcbiAgICB0aGlzLmxvYWRJY29ucygpO1xyXG4gICAgdGhpcy5wZXJtaXNzaW9uU2VydmljZS5nZXRQZXJtaXNzaW9uc1RyZWUodGhpcy5lbnZpcm9ubWVudC5hcHBsaWNhdGlvbmlkKS5zdWJzY3JpYmUoKGl0ZW1zOiBhbnkpID0+IHtcclxuICAgICAgdGhpcy5wZXJtaXNzaW9ucyA9IGl0ZW1zLmRhdGE7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnBlcm1pc3Npb25TZXJ2aWNlLmdldFBlcm1pc3Npb25UeXBlcyh0aGlzLmVudmlyb25tZW50LmFwcGxpY2F0aW9uaWQpLnN1YnNjcmliZSgoaXRlbXM6IGFueSkgPT4ge1xyXG4gICAgICB0aGlzLnBlcm1pc3Npb25UeXBlcyA9IGl0ZW1zLmRhdGE7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgaW5pdGlhbGl6ZVBhZ2VGb3JtKCkge1xyXG4gICAgdGhpcy5wYWdlRm9ybSA9IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xyXG4gICAgICBpZDogWzBdLFxyXG4gICAgICBwYXJlbnRpZDogW251bGxdLFxyXG4gICAgICBhcHBsaWNhdGlvbmlkOiBbdGhpcy5lbnZpcm9ubWVudCA/IHRoaXMuZW52aXJvbm1lbnRbJ2FwcGxpY2F0aW9uaWQnXTogJyddLFxyXG4gICAgICBuYW1lOiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWQgXSxcclxuICAgICAgcGFnZXR5cGU6IFsnJyBdLFxyXG4gICAgICBtZW51VHlwZTogWycnIF0sXHJcbiAgICAgIHJvdXRlOiBbJyddLFxyXG4gICAgICBvcmRlcjogWzBdLFxyXG4gICAgICBpc21lbnU6IFt0cnVlXSxcclxuICAgICAgdGh1bWJuYWlsOiBbJyddLFxyXG4gICAgICBpY29uOiBbJycsVmFsaWRhdG9ycy5yZXF1aXJlZF1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZVBlcm1pc3Npb25Gb3JtKCkge1xyXG4gICAgdGhpcy5wZXJtaXNzaW9uRm9ybSA9IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xyXG4gICAgICBpZDogWzBdLFxyXG4gICAgICBwYXJlbnRpZDogW251bGxdLFxyXG4gICAgICBwYWdlaWQ6IFswXSxcclxuICAgICAgcGVybWlzc2lvbnR5cGVpZDogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAga2V5OiBbJycsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxyXG4gICAgICBkZXNjcmlwdGlvbjogWycnLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcclxuICAgICAgb3JkZXI6IFswXSxcclxuICAgICAgbWVudVR5cGU6IFsnJ10sXHJcbiAgICAgIHBhZ2V0eXBlOiBbJyddXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG9uTm9kZUNvbnRleHRNZW51U2VsZWN0KF9ldmVudDogYW55KSB7XHJcbiAgICBjb25zb2xlLmxvZygpO1xyXG4gIH1cclxuXHJcbiAgbm9kZVNlbGVjdChldmVudDogYW55KSB7XHJcbiAgICB0aGlzLnNhdmVNb2RlID0gJ1VQREFURSc7XHJcbiAgICB0aGlzLnNob3dMaW5rUGFnZT1mYWxzZTtcclxuICAgIHRoaXMubm9kZVR5cGUgPSBldmVudC5ub2RlLnR5cGU7XHJcbiAgICBpZiAoZXZlbnQubm9kZS50eXBlID09PSAncGVybWlzc2lvbicpIHtcclxuICAgICAgdGhpcy5wZXJtaXNzaW9uRm9ybS5yZXNldCgpO1xyXG4gICAgICB0aGlzLnBlcm1pc3Npb25Gb3JtLnBhdGNoVmFsdWUoZXZlbnQubm9kZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBhZ2VGb3JtLnJlc2V0KCk7XHJcbiAgICAgIHRoaXMucGFnZUZvcm0ucGF0Y2hWYWx1ZShldmVudC5ub2RlKTtcclxuICAgICAgaWYoZXZlbnQubm9kZS5tZW51VHlwZSA9PSAncGFyZW50Jyl7XHJcbiAgICAgICAgICB0aGlzLnNob3dQYXJlbnQgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5zaG93UGFyZW50ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgaWYoIWV2ZW50Lm5vZGUucGFnZXR5cGUgfHwgZXZlbnQubm9kZS5wYWdldHlwZSA9PSAnZHluYW1pYycgfHwgZXZlbnQubm9kZS5wYWdldHlwZSA9PSAnJyl7XHJcbiAgICAgICAgdGhpcy5zaG93RHluYW1pYyA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuc2hvd0R5bmFtaWMgPSBmYWxzZTtcclxuICAgIH1cclxuICAgICAgdGhpcy5wYWdlRm9ybS5wYXRjaFZhbHVlKHtcclxuICAgICAgICBpY29uOiBldmVudC5ub2RlLmFkZGl0aW9uYWxpbmZvPy5pY29uIHx8ICcnLFxyXG4gICAgICB9KTtcclxuICAgICAgaWYoZXZlbnQubm9kZS5yb3V0ZS5pbmNsdWRlcygnL3BhZ2VzL2R5bmFtaWMtc2VhcmNoL3NlYXJjaCcpKXtcclxuICAgICAgICB0aGlzLnNob3dMaW5rUGFnZT10cnVlO1xyXG4gICAgICAgIHRoaXMucGFnZUZvcm0ucGF0Y2hWYWx1ZSh7XHJcbiAgICAgICAgICByb3V0ZTpldmVudC5ub2RlLnJvdXRlLnNwbGl0KCcvJylbNF1cclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuaW1hZ2VJbmZvcm1hdGlvbiA9IGV2ZW50Lm5vZGUuYWRkaXRpb25hbGluZm8/LnRodW1ibmFpbD8uZmlsZU5hbWU/LnNwbGl0KCcvJylbMV0gfHwgJyc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBub2RlRXhwYW5kKGV2ZW50OiBhbnkpIHtcclxuICAgIGNvbnN0IHBhZ2VJZCA9IGV2ZW50Lm5vZGUudHlwZSA9PT0gJ3Blcm1pc3Npb24nID8gZXZlbnQubm9kZS5wYWdlaWQgOiBldmVudC5ub2RlLmRhdGE7XHJcbiAgICBjb25zdCBwYXJlbnRJZCA9IGV2ZW50Lm5vZGUudHlwZSA9PT0gJ3Blcm1pc3Npb24nID8gZXZlbnQubm9kZS5kYXRhIDogMDtcclxuICAgIGlmIChldmVudC5ub2RlICYmIGV2ZW50Lm5vZGUuZGF0YSkge1xyXG4gICAgICB0aGlzLnBlcm1pc3Npb25TZXJ2aWNlLmdldFBlcm1pc3Npb25UcmVlKHBhZ2VJZCwgcGFyZW50SWQpLnN1YnNjcmliZSgobm9kZXM6IGFueSkgPT4ge1xyXG4gICAgICAgIGV2ZW50Lm5vZGUuY2hpbGRyZW4gPSAoPGFueT5ub2RlcykuZGF0YTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzYXZlUGFnZSgpIHtcclxuICAgIGNvbnN0IHBhZ2UgPSB0aGlzLnBhZ2VGb3JtLnZhbHVlO1xyXG4gICAgcGFnZS5hcHBsaWNhdGlvbmlkID10aGlzLmVudmlyb25tZW50LmFwcGxpY2F0aW9uaWQ7XHJcbiAgICBwYWdlLmFkZGl0aW9uYWxpbmZvID0ge1xyXG4gICAgICBpY29uOiBwYWdlLmljb25cclxuICAgIH07XHJcbiAgICBpZiAodGhpcy5zaG93TGlua1BhZ2UpIHtcclxuICAgICAgcGFnZS5yb3V0ZSA9IGAvcGFnZXMvZHluYW1pYy1zZWFyY2gvc2VhcmNoLyR7cGFnZS5yb3V0ZX1gO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMucGFnZUZvcm0udmFsaWQpIHtcclxuICAgICAgcGFnZS5vcmRlciA9IHBhZ2Uub3JkZXIgPyBOdW1iZXIocGFnZS5vcmRlcikgOiAxO1xyXG4gICAgICBpZiAodGhpcy5zYXZlTW9kZSA9PT0gJ0lOU0VSVCcpIHtcclxuICAgICAgICB0aGlzLnBlcm1pc3Npb25TZXJ2aWNlLmNyZWF0ZVBhZ2UocGFnZSkuc3Vic2NyaWJlKChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMuc2hvd0xpbmtQYWdlKSB7XHJcbiAgICAgICAgICAgIHBhZ2UuaWQgPSByZXNbJ2RhdGEnXTtcclxuICAgICAgICAgICAgdGhpcy5zYXZlUGVybWlzc2lvbihwYWdlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoJ1BhZ2UgY3JlYXRlZCBzdWNjZXNzZnVsbHkuJyk7XHJcbiAgICAgICAgICB0aGlzLmxvYWRUcmVlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wZXJtaXNzaW9uU2VydmljZS51cGRhdGVQYWdlKHBhZ2UpLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5zdWNjZXNzKCdQYWdlIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5LicpO1xyXG4gICAgICAgICAgdGhpcy5sb2FkVHJlZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmFsZXJ0U2VydmljZS5lcnJvcignUGxlYXNlIEZpbGwgQWxsIFJlcXVpcmVkIEZpZWxkcy4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNhdmVQZXJtaXNzaW9uKHBhZ2U/OiBhbnkpIHtcclxuICAgIGlmIChwYWdlKSB7XHJcbiAgICAgIHRoaXMucGVybWlzc2lvbkZvcm0ucGF0Y2hWYWx1ZSh7XHJcbiAgICAgICAgZGVzY3JpcHRpb246IHBhZ2UubmFtZSxcclxuICAgICAgICBrZXk6IHBhZ2UubmFtZS50b1VwcGVyQ2FzZSgpLnJlcGxhY2VBbGwoJyAnLCAnXycpLFxyXG4gICAgICAgIHBhZ2VpZDogcGFnZS5pZCxcclxuICAgICAgICBvcmRlcjogMSxcclxuICAgICAgICBwZXJtaXNzaW9udHlwZWlkOiAxXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGVybWlzc2lvbiA9IHtcclxuICAgICAgLi4udGhpcy5wZXJtaXNzaW9uRm9ybS52YWx1ZSxcclxuICAgICAgb3JkZXI6ICt0aGlzLnBlcm1pc3Npb25Gb3JtLnZhbHVlLm9yZGVyXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0aGlzLnBlcm1pc3Npb25Gb3JtLnZhbGlkKSB7XHJcbiAgICAgIHBlcm1pc3Npb24ub3JkZXIgPSBwZXJtaXNzaW9uLm9yZGVyID8gTnVtYmVyKHBlcm1pc3Npb24ub3JkZXIpIDogMTtcclxuICAgICAgZGVsZXRlIHBlcm1pc3Npb24ucmVhZG9ubHk7XHJcbiAgICAgIGlmICh0aGlzLnNhdmVNb2RlID09PSAnSU5TRVJUJykge1xyXG4gICAgICAgIHRoaXMucGVybWlzc2lvblNlcnZpY2UuY3JlYXRlUGVybWlzc2lvbihwZXJtaXNzaW9uKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc3VjY2VzcygnUGVybWlzc2lvbiBjcmVhdGVkIHN1Y2Nlc3NmdWxseS4nKTtcclxuICAgICAgICAgIHRoaXMubG9hZFRyZWUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnBlcm1pc3Npb25TZXJ2aWNlLnVwZGF0ZVBlcm1pc3Npb24ocGVybWlzc2lvbikuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoJ1Blcm1pc3Npb24gdXBkYXRlZCBzdWNjZXNzZnVsbHkuJyk7XHJcbiAgICAgICAgICB0aGlzLmxvYWRUcmVlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHRoaXMuYWxlcnRTZXJ2aWNlLmVycm9yKCdJbnZhbGlkIHBlcm1pc3Npb24gZGF0YS4nKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsZWFyRm9ybSgpIHtcclxuICAgIHRoaXMuc2hvd0ljb24gPSAnJ1xyXG4gICAgaWYgKHRoaXMubm9kZVR5cGUgPT09ICdwZXJtaXNzaW9uJykge1xyXG4gICAgICB0aGlzLmluaXRpYWxpemVQZXJtaXNzaW9uRm9ybSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5pbml0aWFsaXplUGFnZUZvcm0oKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmVzZXRGb3JtKCkge1xyXG4gICAgdGhpcy5zYXZlTW9kZSA9ICcnO1xyXG4gICAgdGhpcy5pbWFnZUluZm9ybWF0aW9uID0gJyc7XHJcbiAgICB0aGlzLnBhZ2VGb3JtLnJlc2V0KCk7XHJcbiAgICB0aGlzLmNsZWFyRm9ybSgpO1xyXG4gIH1cclxuICByZW1vdmVUaHVtYm5haWwoKSB7XHJcbiAgICB0aGlzLnBhZ2VGb3JtLmNvbnRyb2xzWyd0aHVtYm5haWwnXS5yZXNldCgpO1xyXG4gICAgdGhpcy5pbWFnZUluZm9ybWF0aW9uID0gJyc7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQZXJtaXNzaW9uRm9ybSgpIHtcclxuICAgIHRoaXMuaW5pdGlhbGl6ZVBlcm1pc3Npb25Gb3JtKCk7XHJcbiAgICBpZiAodGhpcy5ub2RlVHlwZSA9PT0gJ3BhZ2UnKSB7XHJcbiAgICAgIHRoaXMubm9kZVR5cGUgPSAncGVybWlzc2lvbic7XHJcbiAgICAgIHRoaXMucGVybWlzc2lvbkZvcm0ucGF0Y2hWYWx1ZSh7XHJcbiAgICAgICAgcGFnZWlkOiB0aGlzLnNlbGVjdGVkSXRlbS5pZFxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGVybWlzc2lvbkZvcm0ucGF0Y2hWYWx1ZSh7XHJcbiAgICAgICAgcGFnZWlkOiB0aGlzLnNlbGVjdGVkSXRlbS5wYWdlaWQsXHJcbiAgICAgICAgcGFyZW50aWQ6IHRoaXMuc2VsZWN0ZWRJdGVtLmlkXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbG9hZENvbnRleHRNZW51KHJpZ2h0Y2xpY2tldmVudDogYW55KSB7XHJcbiAgICBjb25zdCBwZXJtaXNzaW9uID0ge1xyXG4gICAgICBTRVRUSU5HU19QRVJfQ1JFQVRFX1BBR0U6IHRydWUsXHJcbiAgICAgIFNFVFRJTkdTX1BFUl9DUkVBVEVfUEVSTUlTU0lPTjogdHJ1ZSxcclxuICAgICAgU0VUVElOR1NfUEVSX0RFTEVURTogdHJ1ZVxyXG4gICAgfTtcclxuICAgIHRoaXMubWVudUl0ZW1zID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgbGFiZWw6ICdDcmVhdGUgc3ViLW1lbnUnLFxyXG4gICAgICAgIGljb246IFByaW1lSWNvbnMuQVJST1dfVVBfTEVGVCxcclxuICAgICAgICB2aXNpYmxlOiBwZXJtaXNzaW9uLlNFVFRJTkdTX1BFUl9DUkVBVEVfUEFHRSxcclxuICAgICAgICBiYWRnZTogJ1NFVFRJTkdTX1BFUl9DUkVBVEVfUEFHRScsXHJcbiAgICAgICAgY29tbWFuZDogKF9ldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnNhdmVNb2RlID0gJ0lOU0VSVCc7XHJcbiAgICAgICAgICB0aGlzLm5vZGVUeXBlID0gJ3BhZ2UnO1xyXG4gICAgICAgICAgdGhpcy5zaG93TGlua1BhZ2UgPSBmYWxzZTtcclxuICAgICAgICAgIHRoaXMuY3JlYXRlU3ViTWVudSh0aGlzLnNlbGVjdGVkSXRlbSk7XHJcbiAgICAgICAgICAvLyB0aGlzLmNsZWFyRm9ybSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgLy8ge1xyXG4gICAgICAvLyAgIGxhYmVsOiAnTGluayBQYWdlJyxcclxuICAgICAgLy8gICBpY29uOiBQcmltZUljb25zLkFSUk9XX1VQX0xFRlQsXHJcbiAgICAgIC8vICAgdmlzaWJsZTogcGVybWlzc2lvbi5TRVRUSU5HU19QRVJfQ1JFQVRFX1BBR0UsXHJcbiAgICAgIC8vICAgY29tbWFuZDogKF9ldmVudDogYW55KSA9PiB7XHJcbiAgICAgIC8vICAgICB0aGlzLnNhdmVNb2RlID0gJ0lOU0VSVCc7XHJcbiAgICAgIC8vICAgICB0aGlzLm5vZGVUeXBlID0gJ3BhZ2UnO1xyXG4gICAgICAvLyAgICAgdGhpcy5zaG93TGlua1BhZ2UgPSB0cnVlO1xyXG4gICAgICAvLyAgICAgdGhpcy5jbGVhckZvcm0oKTtcclxuICAgICAgLy8gICB9XHJcbiAgICAgIC8vIH0sXHJcbiAgICAgIC8vIHtcclxuICAgICAgLy8gICBsYWJlbDogJ0NyZWF0ZSBQZXJtaXNzaW9uJyxcclxuICAgICAgLy8gICBpY29uOiBQcmltZUljb25zLkFSUk9XX0RPV05fUklHSFQsXHJcbiAgICAgIC8vICAgdmlzaWJsZTogcGVybWlzc2lvbi5TRVRUSU5HU19QRVJfQ1JFQVRFX1BFUk1JU1NJT04sXHJcbiAgICAgIC8vICAgYmFkZ2U6ICdTRVRUSU5HU19QRVJfQ1JFQVRFX1BFUk1JU1NJT04nLFxyXG4gICAgICAvLyAgIGNvbW1hbmQ6IF9ldmVudCA9PiB7XHJcbiAgICAgIC8vICAgICB0aGlzLnNhdmVNb2RlID0gJ0lOU0VSVCc7XHJcbiAgICAgIC8vICAgICB0aGlzLm5vZGVUeXBlID0gdGhpcy5zZWxlY3RlZEl0ZW0udHlwZTtcclxuICAgICAgLy8gICAgIHRoaXMuY2xlYXJGb3JtKCk7XHJcbiAgICAgIC8vICAgICB0aGlzLmNyZWF0ZVBlcm1pc3Npb25Gb3JtKCk7XHJcbiAgICAgIC8vICAgfVxyXG4gICAgICAvLyB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbGFiZWw6ICdEZWxldGUnLFxyXG4gICAgICAgIGljb246IFByaW1lSWNvbnMuVFJBU0gsXHJcbiAgICAgICAgdmlzaWJsZTogcGVybWlzc2lvbi5TRVRUSU5HU19QRVJfREVMRVRFLFxyXG4gICAgICAgIGJhZGdlOiAnU0VUVElOR1NfUEVSX0RFTEVURScsXHJcbiAgICAgICAgY29tbWFuZDogX2V2ZW50ID0+IHtcclxuICAgICAgICAgIHRoaXMuc2F2ZU1vZGUgPSAnREVMRVRFJztcclxuICAgICAgICAgIHRoaXMubm9kZVR5cGUgPSB0aGlzLnNlbGVjdGVkSXRlbS50eXBlO1xyXG4gICAgICAgICAgJCgnI0RlbGV0ZVBlcm1pc3Npb24nKS5tb2RhbCgnc2hvdycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZVN1Yk1lbnUoc2VsZWN0ZWRJdGVtOiBhbnkpe1xyXG4gICAgdGhpcy5zaG93UGFyZW50ID0gZmFsc2U7XHJcbiAgICB0aGlzLnBhZ2VGb3JtLnBhdGNoVmFsdWUoe1xyXG4gICAgICBtZW51VHlwZTogJ3BhZ2UnLFxyXG4gICAgICBwYXJlbnRpZDogc2VsZWN0ZWRJdGVtLmlkLFxyXG4gICAgICBuYW1lOiAnJyxcclxuICAgICAgaWNvbjogJycsXHJcbiAgICAgIHBhZ2V0eXBlOiAnJyxcclxuICAgICAgcm91dGU6ICcnXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGxvYWRJY29ucygpe1xyXG4gICAgdGhpcy5pY29ucyA9IEFwcEljb25zLnByZWxvYWRlZEljb25zO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tJY29ucyhldmVudDogYW55KXtcclxuICAgIGNvbnN0IGlzU2V0dGluZ3NJY29uRXhpc3RzID0gdGhpcy5pY29ucy5zb21lKGljb24gPT4gaWNvbi5pY29uID09PSBldmVudC52YWx1ZSk7XHJcbiAgICBpZihpc1NldHRpbmdzSWNvbkV4aXN0cyl7XHJcbiAgICAgIHRoaXMuc2hvd0ljb24gPSBldmVudC52YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2hvd0ljb24gPSAnZXJyb3InO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVsZXRlUGVybWlzc2lvbigpIHtcclxuICAgICQoJyNEZWxldGVQZXJtaXNzaW9uJykubW9kYWwoJ2hpZGUnKTtcclxuICAgIHRoaXMuZGVsZXRlSXRlbSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0UGFnZXNMaXN0KCkge1xyXG4gICAgdGhpcy5wZXJtaXNzaW9uU2VydmljZS5nZXRPcmdhbml6YXRpb25QYWdlKHRoaXMub3JnSWQpLnN1YnNjcmliZSgocmVzOiBhbnkpID0+IHtcclxuICAgICAgY29uc3QgZGF0YSA9IHJlc1snZGF0YSddO1xyXG4gICAgICBpZiAoZGF0YSAmJiBkYXRhPy5sZW5ndGgpIHtcclxuICAgICAgICB0aGlzLnBhZ2VzTGlzdCA9IGRhdGE/LmZpbHRlcigoYTogYW55KSA9PiBhLmFjdGl2ZVZlcnNpb24/LmdyaWRjb25maWcpLm1hcCgoeDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHguYWN0aXZlVmVyc2lvbi5wYWdlaWQgPSB4LmFjdGl2ZVZlcnNpb24ucGFnZWlkLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgaWQ6IHguYWN0aXZlVmVyc2lvbi5wYWdlaWQsXHJcbiAgICAgICAgICAgICAgcGFnZW5hbWU6IHguYWN0aXZlVmVyc2lvbi5wYWdlbmFtZSxcclxuICAgICAgICAgICAgICB2YWx1ZTogeC5hY3RpdmVWZXJzaW9uLnBhZ2VuYW1lXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRQbGF0Zm9ybVBhZ2VMaXN0KCkge1xyXG4gICAgdGhpcy5wZXJtaXNzaW9uU2VydmljZS5nZXRQbGF0Zm9ybVBhZ2UoKS5zdWJzY3JpYmUoKHJlczogYW55KSA9PiB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSByZXNbJ2RhdGEnXTtcclxuICAgICAgaWYgKGRhdGEgJiYgZGF0YT8ubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5wbGF0Zm9ybXBhZ2VzTGlzdCA9IGRhdGE7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0TWVudVR5cGUoKSB7XHJcbiAgICB0aGlzLm1lbnVUeXBlID0gW1xyXG4gICAgICB7IG5hbWUgOiAnUGFyZW50JywgdmFsdWU6ICdwYXJlbnQnIH0sXHJcbiAgICAgIHsgbmFtZSA6ICdQYWdlJywgdmFsdWU6ICdwYWdlJyB9XHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc2V0UGFnZVR5cGUoKSB7XHJcbiAgICB0aGlzLnBhZ2V0eXBlID0gW1xyXG4gICAgICB7IG5hbWUgOiAnUGxhdGZvcm0nLCB2YWx1ZTogJ3BsYXRmb3JtJyB9LFxyXG4gICAgICB7IG5hbWUgOiAnRHluYW1pYycsIHZhbHVlOiAnZHluYW1pYycgfVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIG9uUGFnZVR5cGVDaGFuZ2UoZXZlbnQ6IGFueSl7XHJcbiAgICBpZihldmVudC52YWx1ZSA9PSAnZHluYW1pYycpe1xyXG4gICAgICB0aGlzLnNob3dEeW5hbWljID0gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2hvd0R5bmFtaWMgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uTWVudVR5cGVDaGFuZ2UoZXZlbnQ6IGFueSl7XHJcbiAgICBpZihldmVudC52YWx1ZSA9PSAncGFyZW50Jyl7XHJcbiAgICAgIHRoaXMuc2hvd1BhcmVudCA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNob3dQYXJlbnQgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9hZFRyZWUoKSB7XHJcbiAgICB0aGlzLnBlcm1pc3Npb25TZXJ2aWNlLmdldEFsbFBhZ2VUcmVlKHRoaXMuZW52aXJvbm1lbnQuYXBwbGljYXRpb25pZCkuc3Vic2NyaWJlKChpdGVtczogYW55KSA9PiB7XHJcbiAgICAgIHRoaXMucGFnZXMgPSBpdGVtcztcclxuICAgICAgdGhpcy5kdXBsaWNhdGVwYWdlcyA9IGl0ZW1zO1xyXG4gICAgICBpZiAodGhpcy5wYWdlcy5sZW5ndGgpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IHRoaXMucGFnZXNbMF07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkZWxldGVJdGVtKCkge1xyXG4gICAgdGhpcy5zYXZlTW9kZSA9ICdVUERBVEUnO1xyXG4gICAgaWYgKHRoaXMuc2VsZWN0ZWRJdGVtLnR5cGUgPT09ICdwYWdlJykge1xyXG4gICAgICB0aGlzLnBlcm1pc3Npb25TZXJ2aWNlLmRlbGV0ZVBhZ2UodGhpcy5zZWxlY3RlZEl0ZW0uaWQpLnN1YnNjcmliZSgoX2l0ZW06IGFueSkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoJ1BhZ2UgZGVsZXRlZCBzdWNjZXNzZnVsbHkuJyk7XHJcbiAgICAgICAgdGhpcy5sb2FkVHJlZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucGVybWlzc2lvblNlcnZpY2UuZGVsZXRlUGVybWlzc2lvbih0aGlzLnNlbGVjdGVkSXRlbS5pZCkuc3Vic2NyaWJlKChfaXRlbTogYW55KSA9PiB7XHJcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2Uuc3VjY2VzcygnQ29udHJvbCBQZXJtaXNzaW9uIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5LicpO1xyXG4gICAgICAgIHRoaXMubG9hZFRyZWUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXF1aXJlZElmVmFsaWRhdG9yKHByZWRpY2F0ZTogKCkgPT4gYW55KSB7XHJcbiAgICByZXR1cm4gKGZvcm1Db250cm9sOiBBYnN0cmFjdENvbnRyb2wpID0+IHtcclxuICAgICAgaWYgKCFmb3JtQ29udHJvbC5wYXJlbnQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBpZiAocHJlZGljYXRlKCkpIHtcclxuICAgICAgICByZXR1cm4gVmFsaWRhdG9ycy5yZXF1aXJlZChmb3JtQ29udHJvbCk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlRmlsZUlucHV0KGZpbGVWYWx1ZTogYW55KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBmaWxlVmFsdWUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcbiAgICBjb25zdCBmaWxlOiBGaWxlID0gdGFyZ2V0LmZpbGVzIVswXTtcclxuICAgIHRoaXMudXBsb2FkZWRGaWxlID0gZmlsZVZhbHVlLnRhcmdldC5maWxlc1swXS5uYW1lO1xyXG4gICAgdGhpcy5pbWFnZURhdGEgPSB7XHJcbiAgICAgIGNvbnRlbnRUeXBlOiBmaWxlVmFsdWUudGFyZ2V0LmZpbGVzWzBdLnR5cGUsXHJcbiAgICAgIGZpbGVOYW1lOiBgZHluYW1pYy1tZW51LyR7dGhpcy51cGxvYWRlZEZpbGV9YFxyXG4gICAgfTtcclxuICAgIHRoaXMuaW1hZ2VJbmZvcm1hdGlvbiA9IHRoaXMudXBsb2FkZWRGaWxlO1xyXG4gICAgaWYgKHRoaXMudmFsaWRhdGVJbWFnZShmaWxlVmFsdWUudGFyZ2V0LmZpbGVzKSkge1xyXG4gICAgICB0aGlzLnBlcm1pc3Npb25TZXJ2aWNlLnVwbG9hZEtleSh0aGlzLmltYWdlRGF0YSkuc3Vic2NyaWJlKFxyXG4gICAgICAgIChyZXM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy51cmxQYXRoID0gcmVzLmRhdGE7XHJcbiAgICAgICAgICBjb25zdCB1cGxvYWRBdHRhY2htZW50OiBhbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZScpO1xyXG4gICAgICAgICAgY29uc3QgdXBsb2FkQXR0YWNobWVudERldGFpbHMgPSB1cGxvYWRBdHRhY2htZW50LmZpbGVzWzBdO1xyXG4gICAgICAgICAgdGhpcy5odHRwU2VydmljZS5wdXRVcGxvYWQodGhpcy51cmxQYXRoLCB1cGxvYWRBdHRhY2htZW50RGV0YWlscywgdXBsb2FkQXR0YWNobWVudERldGFpbHMudHlwZSkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAoX3Jlc3A6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnN1Y2Nlc3MoJ1VwbG9hZGVkIFN1Y2Nlc3NmdWxseSEnKTtcclxuICAgICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RVcmwocmVhZGVyLnJlc3VsdCBhcyBzdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlRm9ybS5wYXRjaFZhbHVlKHsgdGh1bWJuYWlsOiB2YWx1ZSBhcyBzdHJpbmcgfSk7XHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcclxuICAgICAgICAgICAgICB0aGlzLmF0dGFjaFR5cGUgPSBmaWxlVmFsdWUudGFyZ2V0LmZpbGVzWzBdLnR5cGU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGVycm9yLnN0YXR1cyA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFsZXJ0U2VydmljZS5lcnJvcignQXBwQ29uc3RhbnRzLmVycm9yTWVzc2FnZScpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlZEZpbGUgPSAnJztcclxuICAgICAgICAgICAgICAgIHRoaXMudXJsUGF0aCA9ICcnO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChfZXJyb3I6IGFueSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5hbGVydFNlcnZpY2UuZXJyb3IoJ0FwcENvbnN0YW50cy5lcnJvck1lc3NhZ2UnKTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZUltYWdlKGZpbGU6IGFueSkge1xyXG4gICAgY29uc3QgZmlsZVNpemUgPSBOdW1iZXIoZmlsZVswXS5zaXplKSAvIDEwMjQ7XHJcbiAgICBjb25zdCBmaWxldHlwZSA9IGZpbGVbMF0udHlwZS5yZXBsYWNlKCdpbWFnZS8nLCAnJyk7XHJcbiAgICBpZiAoXHJcbiAgICAgIGZpbGV0eXBlID09PSAnanBnJyB8fFxyXG4gICAgICBmaWxldHlwZSA9PT0gJ2pwZWcnIHx8XHJcbiAgICAgIGZpbGV0eXBlID09PSAncG5nJyB8fFxyXG4gICAgICBmaWxldHlwZSA9PT0gJ2dpZicgfHxcclxuICAgICAgZmlsZXR5cGUgPT09ICdzdmcreG1sJ1xyXG4gICAgKSB7XHJcbiAgICAgIGlmIChmaWxlU2l6ZSA8IDUwKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5pbWFnZUluZm9ybWF0aW9uID0gJ0ltYWdlIHNpemUgZXhjZWVkcyA1MCBLQic7XHJcbiAgICAgICAgdGhpcy5hbGVydFNlcnZpY2Uud2FybignRmlsZSBpcyBiaWdnZXIgdGhhbiA1MCBLQicpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5pbWFnZUluZm9ybWF0aW9uID0gJyc7XHJcbiAgICAgIHRoaXMuYWxlcnRTZXJ2aWNlLndhcm4oYCR7ZmlsZXR5cGV9IGZvcm1hdCBpcyBub3Qgc3VwcG9ydGVkYCk7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbiAgc2VhcmNoUGVybWlzc2lvbkxpc3QoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IChldmVudC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgIHRoaXMucGFnZXMgPSB0aGlzLmR1cGxpY2F0ZXBhZ2VzLmZpbHRlcigoYTogYW55KSA9PlxyXG4gICAgICBhPy5uYW1lPy50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgodmFsdWUpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCI8YXBwLWFsZXJ0PjwvYXBwLWFsZXJ0PlxyXG48ZGl2IGNsYXNzPVwiYWRqdXN0cGFkZGluZ1wiPlxyXG4gIDxidXR0b24gY2xhc3M9XCJwdWxsLXJpZ2h0IG1iLTIgYnRuIGJ0bi1wcmltYXJ5IGJ0bmNvbW1vblwiIGZpZWxkS2V5PVwiU0VUVElOR1NfUEVSX0FERF9QQUdFXCJcclxuICAgIChjbGljayk9XCJjbGVhckZvcm0oKVwiPlxyXG4gICAgQWRkIE1lbnVcclxuICA8L2J1dHRvbj5cclxuPC9kaXY+XHJcbjxkaXYgY2xhc3M9XCJwZXJtaXNzaW9uXCI+XHJcbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbC1sZy00IGNvbC1tZC02IGNvbC0xMlwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50IHB5LTJcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLXBhbmUgZmFkZSBzaG93IGFjdGl2ZVwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgYmdpY29uc2VhcmNoXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlYXJjaCBieSBNZW51IE5hbWVcIlxyXG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAoa2V5dXApPVwic2VhcmNoUGVybWlzc2lvbkxpc3QoJGV2ZW50KVwiIFxyXG4gICAgICAgICAgICAgIHBJbnB1dFRleHQgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibWFzdGVyYWNlc3NcIj5cclxuICAgICAgICAgICAgPHAtdHJlZSBbdmFsdWVdPVwicGFnZXNcIiBzZWxlY3Rpb25Nb2RlPVwic2luZ2xlXCIgWyhzZWxlY3Rpb24pXT1cInNlbGVjdGVkSXRlbVwiXHJcbiAgICAgICAgICAgICAgKG9uTm9kZVJpZ2h0Q2xpY2spID0gXCJsb2FkQ29udGV4dE1lbnUoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgKG9uTm9kZVNlbGVjdCk9XCJub2RlU2VsZWN0KCRldmVudClcIiAob25Ob2RlQ29udGV4dE1lbnVTZWxlY3QpPVwib25Ob2RlQ29udGV4dE1lbnVTZWxlY3QoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgKG9uTm9kZUV4cGFuZCk9XCJub2RlRXhwYW5kKCRldmVudClcIiBbY29udGV4dE1lbnVdPVwidHJlZUNvbnRleHRNZW51XCI+PC9wLXRyZWU+XHJcbiAgICAgICAgICAgIDxwLWNvbnRleHRNZW51ICN0cmVlQ29udGV4dE1lbnUgW21vZGVsXT1cIm1lbnVJdGVtc1wiIGFwcGVuZFRvPVwiYm9keVwiPjwvcC1jb250ZXh0TWVudT5cclxuICAgICAgICAgICAgPCEtLSA8cC1jb25maXJtUG9wdXAgc3R5bGVDbGFzcz1cImRlbGV0ZS1wb3B1cFwiPjwvcC1jb25maXJtUG9wdXA+IC0tPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGNsYXNzPVwiY29sLWxnLTggY29sLW1kLTYgY29sLTEyIG1hc3Rlci1yaWdodCBtdC0yXCI+XHJcbiAgICAgIDxwLWNhcmQgKm5nSWY9XCJub2RlVHlwZSA9PT0gJ3BhZ2UnXCIgaWQ9XCJwYWdlRm9ybVwiIGNsYXNzPVwicmJhYy1jYXJkXCIgW2Zvcm1Hcm91cF09XCJwYWdlRm9ybVwiXHJcbiAgICAgICAgW3N0eWxlXT1cInsgd2lkdGg6ICcxMDAlJywgJ21hcmdpbi1ib3R0b20nOiAnMmVtJyB9XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInN0cmlwX2hlYWQgdG9nZ2xlbGVmdFwiPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJyZXBvcnRfaGVhZCBmb250LXdlaWdodC1ib2xkXCI+QWRkIE1lbnU8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGlucHV0IGlkPVwiY2lkXCIgdHlwZT1cImhpZGRlblwiIGZvcm1Db250cm9sTmFtZT1cImlkXCIgLz5cclxuICAgICAgICA8aW5wdXQgaWQ9XCJjYXBwbGljYXRpb25pZFwiIHR5cGU9XCJoaWRkZW5cIiBmb3JtQ29udHJvbE5hbWU9XCJhcHBsaWNhdGlvbmlkXCIgLz5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicC1mbHVpZCBwLWZvcm1ncmlkIHAtZ3JpZFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1sZy0zIGNvbC1tZC0xMiBjb2wtMTIgbWItM1wiPlxyXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiY25hbWVcIiBjbGFzcz1cInJlZmVycmFsLWZvcm0tbGFiZWxzXCI+TmFtZVxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVxdWlyZWRmaWVsZCB0ZXh0LWRhbmdlclwiPio8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cImNuYW1lXCIgdHlwZT1cInRleHRcIiBmb3JtQ29udHJvbE5hbWU9XCJuYW1lXCIgZmllbGRLZXk9XCJTRVRUSU5HU19QRVJfTkFNRVwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgTmFtZVwiXHJcbiAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImNuYW1lXCIgcGF0dGVybj1cIlthLXpBLVowLTldKyhcXHNbYS16QS1aMC05XSspKlwiIHBJbnB1dFRleHQgLz5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cIlxyXG4gICAgICAgICAgICAgIHBhZ2VGb3JtLmNvbnRyb2xzWyduYW1lJ10uaW52YWxpZCAmJlxyXG4gICAgICAgICAgICAgICAgcGFnZUZvcm0uY29udHJvbHNbJ25hbWUnXS5kaXJ0eSAmJlxyXG4gICAgICAgICAgICAgICAgIXBhZ2VGb3JtLmNvbnRyb2xzWyduYW1lJ10uaGFzRXJyb3IoJ3JlcXVpcmVkJylcIj5cclxuICAgICAgICAgICAgICA8c21hbGwgKm5nSWY9XCJwYWdlRm9ybS5jb250cm9sc1snbmFtZSddLmVycm9ycyAmJiBwYWdlRm9ybS5jb250cm9sc1snbmFtZSddLmludmFsaWRcIlxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJwLWVycm9yIGJsb2NrXCI+SW52YWxpZCBpbnB1dCBkYXRhPC9zbWFsbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJcclxuICAgICAgICAgICAgcGFnZUZvcm0uY29udHJvbHNbJ25hbWUnXS5pbnZhbGlkICYmXHJcbiAgICAgICAgICAgIHBhZ2VGb3JtLmNvbnRyb2xzWyduYW1lJ10uaGFzRXJyb3IoJ3JlcXVpcmVkJykgJiZcclxuICAgICAgICAgICAgKHBhZ2VGb3JtLmNvbnRyb2xzWyduYW1lJ10uZGlydHkgfHwgcGFnZUZvcm0uY29udHJvbHNbJ25hbWUnXS50b3VjaGVkKVwiPlxyXG4gICAgICAgICAgICAgIDxzbWFsbCAqbmdJZj1cInBhZ2VGb3JtLmNvbnRyb2xzWyduYW1lJ10uaGFzRXJyb3IoJ3JlcXVpcmVkJylcIiBjbGFzcz1cInAtZXJyb3IgYmxvY2tcIj5OYW1lIGlzXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZDwvc21hbGw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLWxnLTMgY29sLW1kLTEyIGNvbC0xMiBtYi0zXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJpY29uXCIgY2xhc3M9XCJyZWZlcnJhbC1mb3JtLWxhYmVsc1wiPlxyXG4gICAgICAgICAgICAgIEljb25cclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcXVpcmVkZmllbGQgdGV4dC1kYW5nZXJcIj4qPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4XCI+XHJcbiAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgaWQ9XCJpY29uXCIgdHlwZT1cInRleHRcIiBmb3JtQ29udHJvbE5hbWU9XCJpY29uXCIgcGxhY2Vob2xkZXI9XCJFbnRlciBJY29uIE5hbWVcIlxyXG4gICAgICAgICAgICAgICAgYXJpYS1kZXNjcmliZWRieT1cImNkZXNjcmlwdGlvbi1pY29uXCIgcElucHV0VGV4dCAvPiAtLT5cclxuICAgICAgICAgICAgICA8cC1kcm9wZG93biBbb3B0aW9uc109XCJpY29uc1wiIGZvcm1Db250cm9sTmFtZT1cImljb25cIiBmaWVsZEtleT1cIlNFVFRJTkdTX1BFUl9ST1VURVwiIChvbkNoYW5nZSk9XCJjaGVja0ljb25zKCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlci9TZWxlY3QgSWNvblwiIG9wdGlvbkxhYmVsPVwiaWNvblwiIG9wdGlvblZhbHVlPVwiaWNvblwiIFtzaG93Q2xlYXJdPVwidHJ1ZVwiIFtlZGl0YWJsZV09XCJ0cnVlXCI+XHJcbiAgICAgICAgICAgICAgPC9wLWRyb3Bkb3duPlxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWF0ZXJpYWwtc3ltYm9scy1vdXRsaW5lZCB1c2VyZW1wdHlcIj5cclxuICAgICAgICAgICAgICAgIHt7IHNob3dJY29uIH19XHJcbiAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cIiBwYWdlRm9ybS5jb250cm9sc1snaWNvbiddLmludmFsaWQgJiZcclxuICAgICAgICAgICAgICAocGFnZUZvcm0uY29udHJvbHNbJ2ljb24nXS5kaXJ0eSB8fCBwYWdlRm9ybS5jb250cm9sc1snaWNvbiddLnRvdWNoZWQpXCI+XHJcbiAgICAgICAgICAgICAgPHNtYWxsICpuZ0lmPVwicGFnZUZvcm0uY29udHJvbHNbJ2ljb24nXS5pbnZhbGlkXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrXCI+SWNvbiBpcyByZXF1aXJlZCA8L3NtYWxsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1sZy0zIGNvbC1tZC0xMiBjb2wtMTIgbWItM1wiPlxyXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiY3JvdXRlXCIgY2xhc3M9XCJyZWZlcnJhbC1mb3JtLWxhYmVsc1wiPlxyXG4gICAgICAgICAgICAgIE1lbnUgVHlwZVxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVxdWlyZWRmaWVsZCB0ZXh0LWRhbmdlclwiPio8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxwLWRyb3Bkb3duIFtvcHRpb25zXT1cIm1lbnVUeXBlXCIgZm9ybUNvbnRyb2xOYW1lPVwibWVudVR5cGVcIiBmaWVsZEtleT1cIlNFVFRJTkdTX1BFUl9OQU1FXCIgKG9uQ2hhbmdlKT1cIm9uTWVudVR5cGVDaGFuZ2UoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWxlY3QgTWVudSBUeXBlXCIgb3B0aW9uTGFiZWw9XCJuYW1lXCIgb3B0aW9uVmFsdWU9XCJ2YWx1ZVwiIFtzaG93Q2xlYXJdPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICA8L3AtZHJvcGRvd24+XHJcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJwYWdlRm9ybS5jb250cm9sc1snbWVudVR5cGUnXS5pbnZhbGlkICYmXHJcbiAgICAgICAgICAgICAgICAocGFnZUZvcm0uY29udHJvbHNbJ21lbnVUeXBlJ10uZGlydHkgfHwgcGFnZUZvcm0uY29udHJvbHNbJ21lbnVUeXBlJ10udG91Y2hlZClcIj5cclxuICAgICAgICAgICAgICA8c21hbGwgKm5nSWY9XCJwYWdlRm9ybS5jb250cm9sc1snbWVudVR5cGUnXS5pbnZhbGlkXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrXCI+TWVudSB0eXBlIGlzIHJlcXVpcmVkIDwvc21hbGw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XCJjb2wtbGctMyBjb2wtbWQtMTIgY29sLTEyIG1iLTNcIiAqbmdJZj1cIiFzaG93TGlua1BhZ2VcIj5cclxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNyb3V0ZVwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5cclxuICAgICAgICAgICAgICBSb3V0ZVxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVxdWlyZWRmaWVsZCB0ZXh0LWRhbmdlclwiPio8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cImNyb3V0ZVwiIHR5cGU9XCJ0ZXh0XCIgZm9ybUNvbnRyb2xOYW1lPVwicm91dGVcIiBmaWVsZEtleT1cIlNFVFRJTkdTX1BFUl9ST1VURVwiXHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBSb3V0ZVwiIGFyaWEtZGVzY3JpYmVkYnk9XCJjcm91dGVcIiBwYXR0ZXJuPVwiW2EtekEtWjAtOVxcL1xcXFwtXSpcIiBwSW5wdXRUZXh0IC8+XHJcbiAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cIlxyXG4gICAgICAgICAgICAgIHBhZ2VGb3JtLmNvbnRyb2xzWydyb3V0ZSddLmludmFsaWQgJiZcclxuICAgICAgICAgICAgICAgIHBhZ2VGb3JtLmNvbnRyb2xzWydyb3V0ZSddLmRpcnR5ICYmXHJcbiAgICAgICAgICAgICAgIXBhZ2VGb3JtLmNvbnRyb2xzWydyb3V0ZSddLmhhc0Vycm9yKCdyZXF1aXJlZCcpXCI+XHJcbiAgICAgICAgICAgICAgPHNtYWxsICpuZ0lmPVwicGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10uZXJyb3JzICYmIHBhZ2VGb3JtLmNvbnRyb2xzWydyb3V0ZSddLmludmFsaWRcIlxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJwLWVycm9yIGJsb2NrXCI+SW52YWxpZCBpbnB1dCBkYXRhPC9zbWFsbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJcclxuICAgICAgICAgICAgcGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10uaW52YWxpZCAmJlxyXG4gICAgICAgICAgICBwYWdlRm9ybS5jb250cm9sc1sncm91dGUnXS5oYXNFcnJvcigncmVxdWlyZWQnKSAmJlxyXG4gICAgICAgICAgICAocGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10uZGlydHkgfHwgcGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10udG91Y2hlZClcIj5cclxuICAgICAgICAgICAgICA8c21hbGwgKm5nSWY9XCJwYWdlRm9ybS5jb250cm9sc1sncm91dGUnXS5oYXNFcnJvcigncmVxdWlyZWQnKVwiIGNsYXNzPVwicC1lcnJvciBibG9ja1wiPlJvdXRlIGlzXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZDwvc21hbGw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+IC0tPlxyXG4gICAgICAgICAgPCEtLSA8ZGl2IGNsYXNzPVwiY29sLWxnLTMgY29sLW1kLTEyIGNvbC0xMiBtYi0zXCIgKm5nSWY9XCJzaG93TGlua1BhZ2VcIj5cclxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNyb3V0ZVwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5cclxuICAgICAgICAgICAgICBEeW5hbWljIFBhZ2VzXHJcbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJyZXF1aXJlZGZpZWxkIHRleHQtZGFuZ2VyXCI+Kjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9sYWJlbD5cclxuICAgICAgICAgICAgPHAtZHJvcGRvd24gW29wdGlvbnNdPVwicGFnZXNMaXN0XCIgZm9ybUNvbnRyb2xOYW1lPVwicm91dGVcIiBmaWVsZEtleT1cIlNFVFRJTkdTX1BFUl9ST1VURVwiXHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWxlY3QgRHluYW1pYyBQYWdlXCIgb3B0aW9uTGFiZWw9XCJ2YWx1ZVwiIG9wdGlvblZhbHVlPVwiaWRcIiBbc2hvd0NsZWFyXT1cInRydWVcIj5cclxuICAgICAgICAgICAgPC9wLWRyb3Bkb3duPlxyXG4gICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiXHJcbiAgICAgICAgICAgICAgICBwYWdlRm9ybS5jb250cm9sc1sncm91dGUnXS5pbnZhbGlkICYmXHJcbiAgICAgICAgICAgICAgICAocGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10uZGlydHkgfHwgcGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10udG91Y2hlZClcclxuICAgICAgICAgICAgICBcIj5cclxuICAgICAgICAgICAgICA8c21hbGwgKm5nSWY9XCJwYWdlRm9ybS5jb250cm9sc1sncm91dGUnXS5pbnZhbGlkXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrXCI+Um91dGUgaXMgcmVxdWlyZWQgPC9zbWFsbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj4gLS0+XHJcbiAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XCJjb2wtbGctMyBjb2wtbWQtMTIgY29sLTEyIG1iLTNcIj5cclxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNvcmRlclwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5QYXJlbnQgUGFnZSA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8cC1kcm9wZG93biBbb3B0aW9uc109XCJwYWdlc1wiIHBsYWNlaG9sZGVyPVwiU2VsZWN0IFBhcmVudCBQYWdlXCIgZm9ybUNvbnRyb2xOYW1lPVwicGFyZW50aWRcIiBvcHRpb25MYWJlbD1cIm5hbWVcIlxyXG4gICAgICAgICAgICAgIG9wdGlvblZhbHVlPVwiaWRcIiBbc2hvd0NsZWFyXT1cInRydWVcIiBmaWVsZEtleT1cIlNFVFRJTkdTX1BFUl9QQVJFTlRfUEFHRVwiPlxyXG4gICAgICAgICAgICA8L3AtZHJvcGRvd24+XHJcbiAgICAgICAgICA8L2Rpdj4gLS0+XHJcbiAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XCJjb2wtbGctMyBjb2wtbWQtMTIgY29sLTEyIG1iLTNcIj5cclxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNvcmRlclwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHMgZC1ub25lIGQtbGctaW5saW5lLWJsb2NrXCI+JiMxNjA7PC9sYWJlbD5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8cC1jaGVja2JveCBzdCBpbnB1dElkPVwiYmluYXJ5XCIgW2JpbmFyeV09XCJ0cnVlXCIgZmllbGRLZXk9XCJTRVRUSU5HU19QRVJfTUVOVVwiIGZvcm1Db250cm9sTmFtZT1cImlzbWVudVwiXHJcbiAgICAgICAgICAgICAgICBsYWJlbD1cIk1lbnVcIj48L3AtY2hlY2tib3g+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+IC0tPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwLWZsdWlkIHAtZm9ybWdyaWQgcC1ncmlkXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLWxnLTMgY29sLW1kLTEyIGNvbC0xMiBtYi0zXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJjb3JkZXJcIiBjbGFzcz1cInJlZmVycmFsLWZvcm0tbGFiZWxzXCI+UGFyZW50IFBhZ2UgPC9sYWJlbD5cclxuICAgICAgICAgICAgPHAtZHJvcGRvd24gW29wdGlvbnNdPVwicGFnZXNcIiBwbGFjZWhvbGRlcj1cIlNlbGVjdCBQYXJlbnQgUGFnZVwiIGZvcm1Db250cm9sTmFtZT1cInBhcmVudGlkXCIgb3B0aW9uTGFiZWw9XCJuYW1lXCJcclxuICAgICAgICAgICAgICBvcHRpb25WYWx1ZT1cImlkXCIgW3Nob3dDbGVhcl09XCJ0cnVlXCIgZmllbGRLZXk9XCJTRVRUSU5HU19QRVJfUEFSRU5UX1BBR0VcIj5cclxuICAgICAgICAgICAgPC9wLWRyb3Bkb3duPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLWxnLTMgY29sLW1kLTEyIGNvbC0xMiBtYi0zXCIgKm5nSWY9XCIhc2hvd1BhcmVudFwiPlxyXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiY3JvdXRlXCIgY2xhc3M9XCJyZWZlcnJhbC1mb3JtLWxhYmVsc1wiPlxyXG4gICAgICAgICAgICAgIFBhZ2UgVHlwZVxyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVxdWlyZWRmaWVsZCB0ZXh0LWRhbmdlclwiPio8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxwLWRyb3Bkb3duIFtvcHRpb25zXT1cInBhZ2V0eXBlXCIgZm9ybUNvbnRyb2xOYW1lPVwicGFnZXR5cGVcIiBmaWVsZEtleT1cIlNFVFRJTkdTX1BFUl9OQU1FXCJcclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBQYWdlIFR5cGVcIiBvcHRpb25MYWJlbD1cIm5hbWVcIiBvcHRpb25WYWx1ZT1cInZhbHVlXCIgKG9uQ2hhbmdlKT1cIm9uUGFnZVR5cGVDaGFuZ2UoJGV2ZW50KVwiIFtzaG93Q2xlYXJdPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICA8L3AtZHJvcGRvd24+XHJcbiAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJcclxuICAgICAgICAgICAgICAgIHBhZ2VGb3JtLmNvbnRyb2xzWydwYWdldHlwZSddLmludmFsaWQgJiZcclxuICAgICAgICAgICAgICAgIChwYWdlRm9ybS5jb250cm9sc1sncGFnZXR5cGUnXS5kaXJ0eSB8fCBwYWdlRm9ybS5jb250cm9sc1sncGFnZXR5cGUnXS50b3VjaGVkKVxyXG4gICAgICAgICAgICAgIFwiPlxyXG4gICAgICAgICAgICAgIDxzbWFsbCAqbmdJZj1cInBhZ2VGb3JtLmNvbnRyb2xzWydwYWdldHlwZSddLmludmFsaWRcIiBjbGFzcz1cInAtZXJyb3IgYmxvY2tcIj5QYWdlIHR5cGUgaXMgcmVxdWlyZWQgPC9zbWFsbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbGctMyBjb2wtbWQtMTIgY29sLTEyIG1iLTNcIiAqbmdJZj1cInNob3dEeW5hbWljICYmICFzaG93UGFyZW50XCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJjcm91dGVcIiBjbGFzcz1cInJlZmVycmFsLWZvcm0tbGFiZWxzXCI+XHJcbiAgICAgICAgICAgICAgRHluYW1pYyBQYWdlc1xyXG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicmVxdWlyZWRmaWVsZCB0ZXh0LWRhbmdlclwiPio8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxwLWRyb3Bkb3duIFtvcHRpb25zXT1cInBhZ2VzTGlzdFwiIGZvcm1Db250cm9sTmFtZT1cInJvdXRlXCIgZmllbGRLZXk9XCJTRVRUSU5HU19QRVJfUk9VVEVcIlxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VsZWN0IER5bmFtaWMgUGFnZVwiIG9wdGlvbkxhYmVsPVwidmFsdWVcIiBvcHRpb25WYWx1ZT1cImlkXCIgW3Nob3dDbGVhcl09XCJ0cnVlXCI+XHJcbiAgICAgICAgICAgIDwvcC1kcm9wZG93bj5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cIlxyXG4gICAgICAgICAgICAgICAgcGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10uaW52YWxpZCAmJlxyXG4gICAgICAgICAgICAgICAgKHBhZ2VGb3JtLmNvbnRyb2xzWydyb3V0ZSddLmRpcnR5IHx8IHBhZ2VGb3JtLmNvbnRyb2xzWydyb3V0ZSddLnRvdWNoZWQpXHJcbiAgICAgICAgICAgICAgXCI+XHJcbiAgICAgICAgICAgICAgPHNtYWxsICpuZ0lmPVwicGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10uaW52YWxpZFwiIGNsYXNzPVwicC1lcnJvciBibG9ja1wiPkR5bmFtaWMgcGFnZSBpcyByZXF1aXJlZCA8L3NtYWxsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1sZy0zIGNvbC1tZC0xMiBjb2wtMTIgbWItM1wiICpuZ0lmPVwiIXNob3dEeW5hbWljICYmICFzaG93UGFyZW50XCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJjcm91dGVcIiBjbGFzcz1cInJlZmVycmFsLWZvcm0tbGFiZWxzXCI+XHJcbiAgICAgICAgICAgICAgUGxhdGZvcm0gUGFnZXNcclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcXVpcmVkZmllbGQgdGV4dC1kYW5nZXJcIj4qPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8cC1kcm9wZG93biBbb3B0aW9uc109XCJwbGF0Zm9ybXBhZ2VzTGlzdFwiIGZvcm1Db250cm9sTmFtZT1cInJvdXRlXCIgZmllbGRLZXk9XCJTRVRUSU5HU19QRVJfUk9VVEVcIlxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiU2VsZWN0IFBsYXRmb3JtIFBhZ2VcIiBvcHRpb25MYWJlbD1cInBhZ2VuYW1lXCIgb3B0aW9uVmFsdWU9XCJwYWdldXJsXCIgW3Nob3dDbGVhcl09XCJ0cnVlXCI+XHJcbiAgICAgICAgICAgIDwvcC1kcm9wZG93bj5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cIlxyXG4gICAgICAgICAgICAgICAgcGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10uaW52YWxpZCAmJlxyXG4gICAgICAgICAgICAgICAgKHBhZ2VGb3JtLmNvbnRyb2xzWydyb3V0ZSddLmRpcnR5IHx8IHBhZ2VGb3JtLmNvbnRyb2xzWydyb3V0ZSddLnRvdWNoZWQpXHJcbiAgICAgICAgICAgICAgXCI+XHJcbiAgICAgICAgICAgICAgPHNtYWxsICpuZ0lmPVwicGFnZUZvcm0uY29udHJvbHNbJ3JvdXRlJ10uaW52YWxpZFwiIGNsYXNzPVwicC1lcnJvciBibG9ja1wiPlBsYXRmb3JtIHBhZ2UgaXMgcmVxdWlyZWQgPC9zbWFsbD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwibXQtMlwiPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInB1bGwtcmlnaHQgbWItMiBidG4gYnRuLXByaW1hcnkgYnRuY29tbW9uXCIgZmllbGRLZXk9XCJTRVRUSU5HU19QRVJfQUREX1BBR0VcIlxyXG4gICAgICAgICAgICAoY2xpY2spPVwic2F2ZVBhZ2UoKVwiPlxyXG4gICAgICAgICAgICB7eyBzYXZlTW9kZSA9PT0gJ1VQREFURScgPyAnVXBkYXRlIE1lbnUnIDogJ0FkZCBNZW51JyB9fVxyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8YnV0dG9uIGZpZWxkS2V5PVwiU0VUVElOR1NfUEVSX0NBTkNFTFwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwicHVsbC1yaWdodCBtYi0yIG1yLTIgYnRuIGJnLXdoaXRlIHRleHQtcHJpbWFyeSBib3JkZXIgYm9yZGVyLXByaW1hcnkgYnRuY2FuY2VsXCJcclxuICAgICAgICAgICAgKGNsaWNrKT1cInJlc2V0Rm9ybSgpXCI+XHJcbiAgICAgICAgICAgIENhbmNlbFxyXG4gICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L3AtY2FyZD5cclxuXHJcbiAgICAgIDwhLS0gPHAtY2FyZCAqbmdJZj1cIm5vZGVUeXBlID09PSAncGVybWlzc2lvbidcIiBpZD1cInBlcm1pc3Npb25Gb3JtXCIgY2xhc3M9XCJyYmFjLWNhcmRcIiBbZm9ybUdyb3VwXT1cInBlcm1pc3Npb25Gb3JtXCJcclxuICAgICAgICBbc3R5bGVdPVwieyB3aWR0aDogJzEwMCUnLCAnbWFyZ2luLWJvdHRvbSc6ICcyZW0nIH1cIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwic3RyaXBfaGVhZCB0b2dnbGVsZWZ0XCI+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcG9ydF9oZWFkIGZvbnQtd2VpZ2h0LWJvbGRcIj5QZXJtaXNzaW9uPC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8aW5wdXQgaWQ9XCJsaWRcIiB0eXBlPVwiaGlkZGVuXCIgZm9ybUNvbnRyb2xOYW1lPVwiaWRcIiAvPlxyXG4gICAgICAgIDxpbnB1dCBpZD1cImxwZXJtaXNzaW9ucGFnZWlkXCIgdHlwZT1cImhpZGRlblwiIGZvcm1Db250cm9sTmFtZT1cInBlcm1pc3Npb250eXBlaWRcIiAvPlxyXG4gICAgICAgIDxpbnB1dCBpZD1cImxwYXJlbnRpZFwiIHR5cGU9XCJoaWRkZW5cIiBmb3JtQ29udHJvbE5hbWU9XCJwYXJlbnRpZFwiIC8+XHJcbiAgICAgICAgPGlucHV0IGlkPVwibHBhZ2VpZFwiIHR5cGU9XCJoaWRkZW5cIiBmb3JtQ29udHJvbE5hbWU9XCJwYWdlaWRcIiAvPlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicC1mbHVpZCBwLWZvcm1ncmlkIHAtZ3JpZFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInAtZmllbGQgcC1jb2xcIj5cclxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImxwZXJtaXNzaW9udHlwZVwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5QZXJtaXNzaW9uIFR5cGVcclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcXVpcmVkZmllbGQgdGV4dC1kYW5nZXJcIj4qPC9zcGFuPjwvbGFiZWw+XHJcbiAgICAgICAgICAgIDxwLWRyb3Bkb3duIGlkPVwibHBlcm1pc3Npb250eXBlXCIgW29wdGlvbnNdPVwicGVybWlzc2lvblR5cGVzXCIgcGxhY2Vob2xkZXI9XCJTZWxlY3QgYSBQZXJtaXNzaW9uIFR5cGVcIlxyXG4gICAgICAgICAgICAgIGZvcm1Db250cm9sTmFtZT1cInBlcm1pc3Npb250eXBlaWRcIiBvcHRpb25MYWJlbD1cIm5hbWVcIiBvcHRpb25WYWx1ZT1cImlkXCI+XHJcbiAgICAgICAgICAgIDwvcC1kcm9wZG93bj5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cInBlcm1pc3Npb25Gb3JtLmNvbnRyb2xzWydwZXJtaXNzaW9udHlwZWlkJ10uZXJyb3JzXCI+XHJcbiAgICAgICAgICAgICAgPHNtYWxsICpuZ0lmPVwicGVybWlzc2lvbkZvcm0uY29udHJvbHNbJ3Blcm1pc3Npb250eXBlaWQnXS5pbnZhbGlkXCIgY2xhc3M9XCJwLWVycm9yIGJsb2NrXCI+UGVybWlzc2lvbiBUeXBlXHJcbiAgICAgICAgICAgICAgICBpcyByZXF1aXJlZFxyXG4gICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicC1maWVsZCBwLWNvbFwiPlxyXG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwibGtleVwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5LZXlcclxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInJlcXVpcmVkZmllbGQgdGV4dC1kYW5nZXJcIj4qPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2xhYmVsPlxyXG4gICAgICAgICAgICA8aW5wdXQgaWQ9XCJsa2V5XCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkVudGVyIEtleVwiIGZvcm1Db250cm9sTmFtZT1cImtleVwiIGFyaWEtZGVzY3JpYmVkYnk9XCJsa2V5LWhlbHBcIlxyXG4gICAgICAgICAgICAgIHBJbnB1dFRleHQgLz5cclxuICAgICAgICAgICAgPGRpdiAqbmdJZj1cInBlcm1pc3Npb25Gb3JtLmNvbnRyb2xzWydrZXknXS5lcnJvcnNcIj5cclxuICAgICAgICAgICAgICA8c21hbGwgKm5nSWY9XCJwZXJtaXNzaW9uRm9ybS5jb250cm9sc1sna2V5J10uaW52YWxpZFwiIGNsYXNzPVwicC1lcnJvciBibG9ja1wiPktleSBpcyByZXF1aXJlZCA8L3NtYWxsPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInAtZmllbGQgcC1jb2xcIj5cclxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImx2YWx1ZVwiIGNsYXNzPVwicmVmZXJyYWwtZm9ybS1sYWJlbHNcIj5EZXNjcmlwdGlvbiA8c3BhblxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJyZXF1aXJlZGZpZWxkIHRleHQtZGFuZ2VyXCI+Kjwvc3Bhbj4gPC9sYWJlbD5cclxuICAgICAgICAgICAgPGlucHV0IGlkPVwibHZhbHVlXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkVudGVyIFZhbHVlXCIgZm9ybUNvbnRyb2xOYW1lPVwiZGVzY3JpcHRpb25cIlxyXG4gICAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJwbmFtZS1oZWxwXCIgcElucHV0VGV4dCAvPlxyXG4gICAgICAgICAgICA8ZGl2ICpuZ0lmPVwicGVybWlzc2lvbkZvcm0uY29udHJvbHNbJ2Rlc2NyaXB0aW9uJ10uZXJyb3JzXCI+XHJcbiAgICAgICAgICAgICAgPHNtYWxsICpuZ0lmPVwicGVybWlzc2lvbkZvcm0uY29udHJvbHNbJ2Rlc2NyaXB0aW9uJ10uaW52YWxpZFwiIGNsYXNzPVwicC1lcnJvciBibG9ja1wiPkRlc2NyaXB0aW9uIGlzXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZFxyXG4gICAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtdC0yXCI+XHJcbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBjbGFzcz1cInB1bGwtcmlnaHQgbWItMiBidG4gYnRuLXByaW1hcnkgYnRuY29tbW9uXCIgKGNsaWNrKT1cInNhdmVQZXJtaXNzaW9uKClcIj5cclxuICAgICAgICAgICAge3sgc2F2ZU1vZGUgPT09ICdVUERBVEUnID8gJ1VwZGF0ZSBQZXJtaXNzaW9uJyA6ICdBZGQgUGVybWlzc2lvbicgfX1cclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInB1bGwtcmlnaHQgbWItMiBtci0yIGJ0biBiZy13aGl0ZSB0ZXh0LXByaW1hcnkgYnRuY2FuY2VsXCIgKGNsaWNrKT1cImNsZWFyRm9ybSgpXCI+Q2FuY2VsPC9idXR0b24+XHJcbiAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L3AtY2FyZD4gLS0+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcbjxkaXYgY2xhc3M9XCJtb2RhbFwiIGlkPVwiRGVsZXRlUGVybWlzc2lvblwiIHRhYmluZGV4PVwiLTFcIiByb2xlPVwiZGlhbG9nXCI+XHJcbiAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZ1wiIHJvbGU9XCJkb2N1bWVudFwiPlxyXG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxyXG4gICAgICAgIDxoNSBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RGVsZXRlIFBlcm1pc3Npb248L2g1PlxyXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2xvc2VcIiBkYXRhLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxyXG4gICAgICAgICAgPHNwYW4gYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvc3Bhbj5cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XHJcbiAgICAgICAgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGUgUGVybWlzc2lvbj9cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwibXQtMlwiPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInB1bGwtcmlnaHQgbWItMiBidG4gYnRuLXByaW1hcnkgYnRuY29tbW9uIGRlbGV0ZVwiIGRhdGEtZGlzbWlzcz1cIm1vZGFsXCJcclxuICAgICAgICAgICAgKGNsaWNrKT1cImRlbGV0ZVBlcm1pc3Npb24oKVwiPlxyXG4gICAgICAgICAgICBEZWxldGVcclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInB1bGwtcmlnaHQgbWItMiBtci0yIGJ0biBiZy13aGl0ZSB0ZXh0LXByaW1hcnkgYnRuY2FuY2VsXCIgZGF0YS1kaXNtaXNzPVwibW9kYWxcIj5cclxuICAgICAgICAgICAgQ2FuY2VsXHJcbiAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2xlYXJmaXhcIj48L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9kaXY+Il19